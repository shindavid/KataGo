--- cpp/program/gtpconfig.cpp [lightvector:master]+++ cpp/program/gtpconfig.cpp [hzyhhzy:Reversi2022]@@ -3,13 +3,11 @@ using namespace std;
 
 static const string gtpBase = R"%%(
-# Config for KataGo C++ GTP engine, i.e. "./katago.exe gtp"
 
 # Logs and files--------------------------------------------------------------------------
 
 # Where to output log?
 logDir = gtp_logs    # Each run of KataGo will log to a separate file in this dir
-# logDirDated = gtp_logs  # Use this instead of logDir to also write separate dated subdirs
 # logFile = gtp.log  # Use this instead of logDir to just specify a single file directly
 
 # Logging options
@@ -50,8 +48,6 @@ $$MULTI_STONE_SUICIDE
 
 $$BUTTON
-
-$$WHITE_HANDICAP_BONUS
 
 $$FRIENDLY_PASS_OK
 
@@ -71,21 +67,20 @@ 
 # Assume that if black makes many moves in a row right at the start of the game, then the game is a handicap game.
 # This is necessary on some servers and for some GUIs and also when initializing from many SGF files, which may
-# set up a handicap game using repeated GTP "play" commands for black rather than GTP "place_free_handicap" commands.
+# set up a handicap games using repeated GTP "play" commands for black rather than GTP "place_free_handicap" commands.
 # However, it may also lead to incorrect understanding of komi if whiteHandicapBonus is used and a server does NOT
 # have such a practice.
 # Defaults to true! Uncomment and set to false to disable this behavior.
 # assumeMultipleStartingBlackMovesAreHandicap = true
 
-# Makes katago dynamically adjust in handicap or altered-komi games to assume based on those game settings that it
-# must be stronger or weaker than the opponent and to play accordingly. Greatly improves handicap
-# strength by biasing winrates and scores to favor appropriate safe/aggressive play.
+# Makes katago dynamically adjust in handicap or altered-komi games to assume it is stronger or weaker than the opponent
+# based on those game settings making sense, greatly improving handicap strength but biasing winrates and scores.
 # Does NOT affect analysis (lz-analyze, kata-analyze, used by programs like Lizzie) so analysis remains unbiased.
 # Uncomment and set this to 0 to disable this and make KataGo play the same always.
 # dynamicPlayoutDoublingAdvantageCapPerOppLead = 0.045
 
 # Instead of a dynamic level, you can uncomment this and set this to a value from -3.0 to 3.0 to set KataGo's aggression to a FIXED level.
-# DOES affect analysis tools (lz-analyze, kata-analyze, used by programs like Lizzie).
+# DOES affect analysis (lz-analyze, kata-analyze, used by programs like Lizzie).
 # Negative makes KataGo behave as if it is much weaker than the opponent, preferring to play defensively.
 # Positive makes KataGo behave as if it is much stronger than the opponent, prefering to play aggressively or even overplay slightly.
 # If this and "dynamicPlayoutDoublingAdvantageCapPerOppLead" are BOTH set then dynamic will be used for all games and this fixed
@@ -103,9 +98,6 @@ # Uncomment and set to false to disable this.
 # rootSymmetryPruning = true
 
-# Uncomment and set to true to make KataGo avoid a particular joseki that some KataGo nets misevaluate,
-# and also to improve opening diversity versus some particular other bots that like to play it all the time.
-# avoidMYTDaggerHack = false
 
 # Have KataGo mildly prefer to avoid playing the same joseki in every corner of the board.
 # Uncomment to set to a specific value. Otherwise, defaults to 0 in even games, and to 0.005 in handicap games.
@@ -113,9 +105,8 @@ # avoidRepeatedPatternUtility = 0.0
 
 # Experimental logic to make KataGo fight a bit against mirror Go even with unfavorable komi.
-# Enabled by default for GTP play, disabled for GTP analysis (i.e lizzie) and analysis engine.
-# Uncomment and set to true to enable it for analysis, or false to disable it fully.
-# antiMirror = true
+# Disabled by default, uncomment and set to true to enable it.
+# antiMirror = false
 
 # Search limits-----------------------------------------------------------------------------------
 
@@ -131,7 +122,7 @@ 
 # Ponder on the opponent's turn?
 $$PONDERING
-# Note: you can set "maxVisitsPondering" or "maxPlayoutsPondering" too.
+# Note: you can also set "maxVisitsPondering" or "maxPlayoutsPondering" too.
 
 # Approx number of seconds to buffer for lag for GTP time controls - will move a bit faster assuming there is this much lag per move.
 lagBuffer = 1.0
@@ -167,11 +158,8 @@ # Internal params------------------------------------------------------------------------------
 # Uncomment and edit any of the below values to change them from their default.
 
-# Use graph search rather than tree search - identify and share search for transpositions.
-# useGraphSearch = true
-
-# How much to shard the node table for search synchronization
-# nodeTableShardsPowerOfTwo = 16
+# How big to make the mutex pool for search synchronization
+# mutexPoolSize = 16384
 
 
 # Avoid SGF Patterns ------------------------------------------------------------------------------
@@ -231,33 +219,10 @@     config.replace(pos, key.size(), replacement);
   };
 
-  if(rules.koRule == Rules::KO_SIMPLE)      replace("$$KO_RULE", "koRule = SIMPLE  # options: SIMPLE, POSITIONAL, SITUATIONAL");
-  else if(rules.koRule == Rules::KO_POSITIONAL)  replace("$$KO_RULE", "koRule = POSITIONAL  # options: SIMPLE, POSITIONAL, SITUATIONAL");
-  else if(rules.koRule == Rules::KO_SITUATIONAL) replace("$$KO_RULE", "koRule = SITUATIONAL  # options: SIMPLE, POSITIONAL, SITUATIONAL");
-  else if(rules.koRule == Rules::KO_SPIGHT) replace("$$KO_RULE", "koRule = SPIGHT  # options: SIMPLE, POSITIONAL, SITUATIONAL");
-  else { ASSERT_UNREACHABLE; }
-
-  if(rules.scoringRule == Rules::SCORING_AREA)            replace("$$SCORING_RULE", "scoringRule = AREA  # options: AREA, TERRITORY");
-  else if(rules.scoringRule == Rules::SCORING_TERRITORY)  replace("$$SCORING_RULE", "scoringRule = TERRITORY  # options: AREA, TERRITORY");
-  else { ASSERT_UNREACHABLE; }
 
   if(rules.taxRule == Rules::TAX_NONE)      replace("$$TAX_RULE", "taxRule = NONE  # options: NONE, SEKI, ALL");
   else if(rules.taxRule == Rules::TAX_SEKI) replace("$$TAX_RULE", "taxRule = SEKI  # options: NONE, SEKI, ALL");
   else if(rules.taxRule == Rules::TAX_ALL)  replace("$$TAX_RULE", "taxRule = ALL  # options: NONE, SEKI, ALL");
-  else { ASSERT_UNREACHABLE; }
-
-  if(rules.multiStoneSuicideLegal) replace("$$MULTI_STONE_SUICIDE", "multiStoneSuicideLegal = true");
-  else                             replace("$$MULTI_STONE_SUICIDE", "multiStoneSuicideLegal = false");
-
-  if(rules.hasButton) replace("$$BUTTON", "hasButton = true");
-  else                replace("$$BUTTON", "hasButton = false");
-
-  if(rules.friendlyPassOk) replace("$$FRIENDLY_PASS_OK", "friendlyPassOk = true");
-  else                     replace("$$FRIENDLY_PASS_OK", "friendlyPassOk = false");
-
-  if(rules.whiteHandicapBonusRule == Rules::WHB_ZERO)              replace("$$WHITE_HANDICAP_BONUS", "whiteHandicapBonus = 0  # options: 0, N, N-1");
-  else if(rules.whiteHandicapBonusRule == Rules::WHB_N)            replace("$$WHITE_HANDICAP_BONUS", "whiteHandicapBonus = N  # options: 0, N, N-1");
-  else if(rules.whiteHandicapBonusRule == Rules::WHB_N_MINUS_ONE)  replace("$$WHITE_HANDICAP_BONUS", "whiteHandicapBonus = N-1  # options: 0, N, N-1");
   else { ASSERT_UNREACHABLE; }
 
   if(maxVisits < ((int64_t)1 << 50)) replace("$$MAX_VISITS", "maxVisits = " + Global::int64ToString(maxVisits));
