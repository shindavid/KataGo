--- cpp/program/play.h [lightvector:master]+++ cpp/program/play.h [hzyhhzy:Reversi2022]@@ -5,7 +5,6 @@ #include "../core/global.h"
 #include "../core/multithread.h"
 #include "../core/rand.h"
-#include "../core/threadsafecounter.h"
 #include "../core/threadsafequeue.h"
 #include "../dataio/trainingwrite.h"
 #include "../dataio/sgf.h"
@@ -20,11 +19,10 @@   BoardHistory hist;
   Player pla;
   bool isPlainFork;
-  bool isSekiFork;
   bool isHintFork;
 
   InitialPosition();
-  InitialPosition(const Board& board, const BoardHistory& hist, Player pla, bool isPlainFork, bool isSekiFork, bool isHintFork);
+  InitialPosition(const Board& board, const BoardHistory& hist, Player pla, bool isPlainFork,  bool isHintFork);
   ~InitialPosition();
 };
 
@@ -32,18 +30,14 @@ struct ForkData {
   std::mutex mutex;
   std::vector<const InitialPosition*> forks;
-  std::vector<const InitialPosition*> sekiForks;
   ~ForkData();
 
   void add(const InitialPosition* pos);
   const InitialPosition* get(Rand& rand);
 
-  void addSeki(const InitialPosition* pos, Rand& rand);
-  const InitialPosition* getSeki(Rand& rand);
 };
 
 struct ExtraBlackAndKomi {
-  int extraBlack = 0;
   float komiMean = 7.5f;
   float komiStdev = 7.5f;
   bool makeGameFair = false;
@@ -103,7 +97,7 @@     const Sgf::PositionSample* startPosSample
   );
 
-  Rules randomizeScoringAndTaxRules(Rules rules, Rand& randToUse) const;
+  Rules randomizeTaxRules(Rules rules, Rand& randToUse) const;
 
   //Only sample the space of possible rules
   Rules createRules();
@@ -130,14 +124,7 @@   std::mutex createGameMutex;
   Rand rand;
 
-  std::vector<std::string> allowedKoRuleStrs;
-  std::vector<std::string> allowedScoringRuleStrs;
   std::vector<std::string> allowedTaxRuleStrs;
-  std::vector<bool> allowedMultiStoneSuicideLegals;
-  std::vector<bool> allowedButtons;
-
-  std::vector<int> allowedKoRules;
-  std::vector<int> allowedScoringRules;
   std::vector<int> allowedTaxRules;
 
   std::vector<int> allowedBSizes;
@@ -148,15 +135,12 @@   float komiMean;
   float komiStdev;
   double komiAllowIntegerProb;
-  double handicapProb;
-  double handicapCompensateKomiProb;
   double forkCompensateKomiProb;
   double sgfCompensateKomiProb;
   double komiBigStdevProb;
   float komiBigStdev;
   bool komiAuto;
 
-  int numExtraBlackFixed;
   double noResultStdev;
   double drawRandRadius;
 
@@ -256,7 +240,6 @@     bool doEndGameIfAllPassAlive, bool clearBotBeforeSearch,
     Logger& logger, bool logSearchInfo, bool logMoves,
     int maxMovesPerGame, const std::function<bool()>& shouldStop,
-    const WaitableFlag* shouldPause,
     const PlaySettings& playSettings, const OtherGameProperties& otherGameProps,
     Rand& gameRand,
     std::function<NNEvaluator*()> checkForNewNNEval,
@@ -271,7 +254,6 @@     bool doEndGameIfAllPassAlive, bool clearBotBeforeSearch,
     Logger& logger, bool logSearchInfo, bool logMoves,
     int maxMovesPerGame, const std::function<bool()>& shouldStop,
-    const WaitableFlag* shouldPause,
     const PlaySettings& playSettings, const OtherGameProperties& otherGameProps,
     Rand& gameRand,
     std::function<NNEvaluator*()> checkForNewNNEval,
@@ -286,13 +268,6 @@     Search* bot
   );
 
-  void maybeSekiForkGame(
-    const FinishedGameData* finishedGameData,
-    ForkData* forkData,
-    const PlaySettings& playSettings,
-    const GameInitializer* gameInit,
-    Rand& gameRand
-  );
 
   void maybeHintForkGame(
     const FinishedGameData* finishedGameData,
@@ -329,7 +304,6 @@     const Sgf::PositionSample* startPosSample,
     Logger& logger,
     const std::function<bool()>& shouldStop,
-    const WaitableFlag* shouldPause,
     std::function<NNEvaluator*()> checkForNewNNEval,
     std::function<void(const MatchPairer::BotSpec&, Search*)> afterInitialization,
     std::function<void(const Board&, const BoardHistory&, Player, Loc, const std::vector<double>&, const std::vector<double>&, const std::vector<double>&, const Search*)> onEachMove
