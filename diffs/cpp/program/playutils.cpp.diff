--- cpp/program/playutils.cpp [lightvector:master]+++ cpp/program/playutils.cpp [hzyhhzy:Reversi2022]@@ -1,32 +1,14 @@ #include "../program/playutils.h"
+#include "../core/timer.h"
 
 #include <sstream>
 
-#include "../core/timer.h"
-#include "../core/test.h"
-
 using namespace std;
 
-static int getDefaultMaxExtraBlack(double sqrtBoardArea) {
-  if(sqrtBoardArea <= 10.00001)
-    return 0;
-  if(sqrtBoardArea <= 14.00001)
-    return 1;
-  if(sqrtBoardArea <= 16.00001)
-    return 2;
-  if(sqrtBoardArea <= 17.00001)
-    return 3;
-  if(sqrtBoardArea <= 18.00001)
-    return 4;
-  return 5;
-}
-
-ExtraBlackAndKomi PlayUtils::chooseExtraBlackAndKomi(
-  float base, float stdev, double allowIntegerProb,
-  double handicapProb, int numExtraBlackFixed,
+ExtraBlackAndKomi PlayUtils::chooseKomi(
+  float base, float stdev, double allowIntegerProb, 
   double bigStdevProb, float bigStdev, double sqrtBoardArea, Rand& rand
 ) {
-  int extraBlack = 0;
   float komi = base;
 
   float stdevToUse = 0.0f;
@@ -37,19 +19,9 @@   //Adjust for board size, so that we don't give the same massive komis on smaller boards
   stdevToUse = stdevToUse * (float)(sqrtBoardArea / 19.0);
 
-  //Add handicap stones
-  int defaultMaxExtraBlack = getDefaultMaxExtraBlack(sqrtBoardArea);
-  if((numExtraBlackFixed > 0 || defaultMaxExtraBlack > 0) && rand.nextBool(handicapProb)) {
-    if(numExtraBlackFixed > 0)
-      extraBlack = numExtraBlackFixed;
-    else
-      extraBlack += 1+rand.nextUInt(defaultMaxExtraBlack);
-  }
-
   bool allowInteger = rand.nextBool(allowIntegerProb);
 
   ExtraBlackAndKomi ret;
-  ret.extraBlack = extraBlack;
   ret.komiMean = komi;
   ret.komiStdev = stdevToUse;
   //These two are set later
@@ -179,10 +151,10 @@   vector<double> playSelectionValues;
   int nnXLen = nnOutput->nnXLen;
   int nnYLen = nnOutput->nnYLen;
-  testAssert(nnXLen >= board.x_size);
-  testAssert(nnYLen >= board.y_size);
-  testAssert(nnXLen > 0 && nnXLen < 100); //Just a sanity check to make sure no other crazy values have snuck in
-  testAssert(nnYLen > 0 && nnYLen < 100); //Just a sanity check to make sure no other crazy values have snuck in
+  assert(nnXLen >= board.x_size);
+  assert(nnYLen >= board.y_size);
+  assert(nnXLen > 0 && nnXLen < 100); //Just a sanity check to make sure no other crazy values have snuck in
+  assert(nnYLen > 0 && nnYLen < 100); //Just a sanity check to make sure no other crazy values have snuck in
   int policySize = NNPos::getPolicySize(nnXLen,nnYLen);
   for(int movePos = 0; movePos<policySize; movePos++) {
     Loc moveLoc = NNPos::posToLoc(movePos,board.x_size,board.y_size,nnXLen,nnYLen);
@@ -202,7 +174,7 @@   //add a bit more outlierish variety
   uint32_t idxChosen;
   if(gameRand.nextBool(0.0002))
-    idxChosen = gameRand.nextUInt((uint32_t)playSelectionValues.size());
+    idxChosen = gameRand.nextUInt(playSelectionValues.size());
   else
     idxChosen = gameRand.nextUInt(playSelectionValues.data(),playSelectionValues.size());
   Loc loc = locs[idxChosen];
@@ -214,7 +186,7 @@ //and add entropy
 void PlayUtils::initializeGameUsingPolicy(
   Search* botB, Search* botW, Board& board, BoardHistory& hist, Player& pla,
-  Rand& gameRand, bool doEndGameIfAllPassAlive,
+  Rand& gameRand,
   double proportionOfBoardArea, double temperature
 ) {
   NNResultBuf buf;
@@ -227,87 +199,15 @@ 
     //Make the move!
     assert(hist.isLegal(board,loc,pla));
-    hist.makeBoardMoveAssumeLegal(board,loc,pla,NULL);
+    hist.makeBoardMoveAssumeLegal(board,loc,pla);
     pla = getOpp(pla);
 
-    //Rarely, playing the random moves out this way will end the game
-    if(doEndGameIfAllPassAlive)
-      hist.endGameIfAllPassAlive(board);
     if(hist.isGameFinished)
       break;
   }
 }
 
 
-//Place black handicap stones, free placement
-//Does NOT switch the initial player of the board history to white
-void PlayUtils::playExtraBlack(
-  Search* bot,
-  int numExtraBlack,
-  Board& board,
-  BoardHistory& hist,
-  double temperature,
-  Rand& gameRand
-) {
-  Player pla = P_BLACK;
-
-  NNResultBuf buf;
-  for(int i = 0; i<numExtraBlack; i++) {
-    MiscNNInputParams nnInputParams;
-    nnInputParams.drawEquivalentWinsForWhite = bot->searchParams.drawEquivalentWinsForWhite;
-    bot->nnEvaluator->evaluate(board,hist,pla,nnInputParams,buf,false,false);
-    std::shared_ptr<NNOutput> nnOutput = std::move(buf.result);
-
-    bool allowPass = false;
-    Loc banMove = Board::NULL_LOC;
-    Loc loc = chooseRandomPolicyMove(nnOutput.get(), board, hist, pla, gameRand, temperature, allowPass, banMove);
-    if(loc == Board::NULL_LOC)
-      break;
-
-    assert(hist.isLegal(board,loc,pla));
-    hist.makeBoardMoveAssumeLegal(board,loc,pla,NULL);
-    hist.clear(board,pla,hist.rules,0);
-  }
-
-  bot->setPosition(pla,board,hist);
-}
-
-void PlayUtils::placeFixedHandicap(Board& board, int n) {
-  int xSize = board.x_size;
-  int ySize = board.y_size;
-  if(xSize < 7 || ySize < 7)
-    throw StringError("Board is too small for fixed handicap");
-  if((xSize % 2 == 0 || ySize % 2 == 0) && n > 4)
-    throw StringError("Fixed handicap > 4 is not allowed on boards with even dimensions");
-  if((xSize <= 7 || ySize <= 7) && n > 4)
-    throw StringError("Fixed handicap > 4 is not allowed on boards with size 7");
-  if(n < 2)
-    throw StringError("Fixed handicap < 2 is not allowed");
-  if(n > 9)
-    throw StringError("Fixed handicap > 9 is not allowed");
-
-  board = Board(xSize,ySize);
-
-  int xCoords[3]; //Corner, corner, side
-  int yCoords[3]; //Corner, corner, side
-  if(xSize <= 12) { xCoords[0] = 2; xCoords[1] = xSize-3; xCoords[2] = xSize/2; }
-  else            { xCoords[0] = 3; xCoords[1] = xSize-4; xCoords[2] = xSize/2; }
-  if(ySize <= 12) { yCoords[0] = 2; yCoords[1] = ySize-3; yCoords[2] = ySize/2; }
-  else            { yCoords[0] = 3; yCoords[1] = ySize-4; yCoords[2] = ySize/2; }
-
-  auto s = [&](int xi, int yi) {
-    board.setStone(Location::getLoc(xCoords[xi],yCoords[yi],board.x_size),P_BLACK);
-  };
-  if(n == 2) { s(0,1); s(1,0); }
-  else if(n == 3) { s(0,1); s(1,0); s(0,0); }
-  else if(n == 4) { s(0,1); s(1,0); s(0,0); s(1,1); }
-  else if(n == 5) { s(0,1); s(1,0); s(0,0); s(1,1); s(2,2); }
-  else if(n == 6) { s(0,1); s(1,0); s(0,0); s(1,1); s(0,2); s(1,2); }
-  else if(n == 7) { s(0,1); s(1,0); s(0,0); s(1,1); s(0,2); s(1,2); s(2,2); }
-  else if(n == 8) { s(0,1); s(1,0); s(0,0); s(1,1); s(0,2); s(1,2); s(2,0); s(2,1); }
-  else if(n == 9) { s(0,1); s(1,0); s(0,0); s(1,1); s(0,2); s(1,2); s(2,0); s(2,1); s(2,2); }
-  else { ASSERT_UNREACHABLE; }
-}
 
 double PlayUtils::getHackedLCBForWinrate(const Search* search, const AnalysisData& data, Player pla) {
   double winrate = 0.5 * (1.0 + data.winLossValue);
@@ -348,8 +248,6 @@   newParams.rootFpuLossProp = newParams.fpuLossProp;
   newParams.rootDesiredPerChildVisitsCoeff = 0.0;
   newParams.rootNumSymmetriesToSample = 1;
-  newParams.searchFactorAfterOnePass = 1.0;
-  newParams.searchFactorAfterTwoPass = 1.0;
   if(newParams.numThreads > (numVisits+7)/8)
     newParams.numThreads = (numVisits+7)/8;
   return newParams;
@@ -383,258 +281,6 @@   return values;
 }
 
-static std::pair<double,double> evalKomi(
-  map<float,std::pair<double,double>>& scoreWLCache,
-  Search* botB,
-  Search* botW,
-  const Board& board,
-  BoardHistory& hist,
-  Player pla,
-  int64_t numVisits,
-  const OtherGameProperties& otherGameProps,
-  float roundedClippedKomi
-) {
-  auto iter = scoreWLCache.find(roundedClippedKomi);
-  if(iter != scoreWLCache.end())
-    return iter->second;
-
-  float oldKomi = hist.rules.komi;
-  hist.setKomi(roundedClippedKomi);
-
-  ReportedSearchValues values0 = PlayUtils::getWhiteScoreValues(botB, board, hist, pla, numVisits, otherGameProps);
-  double lead = values0.lead;
-  double winLoss = values0.winLossValue;
-
-  //If we have a second bot, average the two
-  if(botW != NULL && botW != botB) {
-    ReportedSearchValues values1 = PlayUtils::getWhiteScoreValues(botW, board, hist, pla, numVisits, otherGameProps);
-    lead = 0.5 * (values0.lead + values1.lead);
-    winLoss = 0.5 * (values0.winLossValue + values1.winLossValue);
-  }
-  std::pair<double,double> result = std::make_pair(lead,winLoss);
-  scoreWLCache[roundedClippedKomi] = result;
-
-  hist.setKomi(oldKomi);
-  return result;
-}
-
-static double getNaiveEvenKomiHelper(
-  map<float,std::pair<double,double>>& scoreWLCache,
-  Search* botB,
-  Search* botW,
-  const Board& board,
-  BoardHistory& hist,
-  Player pla,
-  int64_t numVisits,
-  const OtherGameProperties& otherGameProps,
-  bool looseClipping
-) {
-  float oldKomi = hist.rules.komi;
-
-  //A few times iterate based on expected score a few times to hopefully get a value close to fair
-  double lastShift = 0.0;
-  double lastWinLoss = 0.0;
-  double lastLead = 0.0;
-  for(int i = 0; i<3; i++) {
-    std::pair<double,double> result = evalKomi(scoreWLCache,botB,botW,board,hist,pla,numVisits,otherGameProps,hist.rules.komi);
-    double lead = result.first;
-    double winLoss = result.second;
-
-    //If the last shift made stats go the WRONG way, and by a nontrivial amount, then revert half of it and stop immediately.
-    if(i > 0) {
-      if((lastLead > 0 && lead > lastLead + 5 && winLoss < 0.75) ||
-         (lastLead < 0 && lead < lastLead - 5 && winLoss > -0.75) ||
-         (lastWinLoss > 0 && winLoss > lastWinLoss + 0.1) ||
-         (lastWinLoss < 0 && winLoss < lastWinLoss - 0.1)
-      ) {
-        float fairKomi = PlayUtils::roundAndClipKomi(hist.rules.komi - lastShift * 0.5f, board, looseClipping);
-        hist.setKomi(fairKomi);
-        // cout << "STOP" << endl;
-        // cout << lastLead << " " << lead << " " << lastWinLoss << " " << winLoss << endl;
-        break;
-      }
-    }
-    lastLead = lead;
-    lastWinLoss = winLoss;
-
-    // cout << hist.rules.komi << " " << lead << " " << winLoss << endl;
-
-    //Shift by the predicted lead
-    double shift = -lead;
-    //Under no situations should the shift be bigger in absolute value than the last shift
-    if(i > 0 && std::fabs(shift) > std::fabs(lastShift)) {
-      if(shift < 0) shift = -std::fabs(lastShift);
-      else if(shift > 0) shift = std::fabs(lastShift);
-    }
-    lastShift = shift;
-
-    //If the score and winrate would like to move in opposite directions, quit immediately.
-    if((shift > 0 && winLoss > 0) || (shift < 0 && lead < 0))
-      break;
-
-    // cout << "Shifting by " << shift << endl;
-    float fairKomi = PlayUtils::roundAndClipKomi(hist.rules.komi + shift, board, looseClipping);
-    hist.setKomi(fairKomi);
-
-    //After a small shift, break out to the binary search.
-    if(std::fabs(shift) < 16.0)
-      break;
-  }
-
-  //Try a small window and do a binary search
-  auto evalWinLoss = [&](double delta) {
-    double newKomi = hist.rules.komi + delta;
-    double winLoss = evalKomi(scoreWLCache,botB,botW,board,hist,pla,numVisits,otherGameProps,PlayUtils::roundAndClipKomi(newKomi,board,looseClipping)).second;
-    // cout << "Delta " << delta << " wr " << winLoss << endl;
-    return winLoss;
-  };
-
-  double lowerDelta;
-  double upperDelta;
-  double lowerWinLoss;
-  double upperWinLoss;
-
-  //Grow window outward
-  {
-    double winLossZero = evalWinLoss(0);
-    if(winLossZero < 0) {
-      //Losing, so this is the lower bound
-      lowerDelta = 0.0;
-      lowerWinLoss = winLossZero;
-      for(int i = 0; i<=5; i++) {
-        upperDelta = round(pow(2.0,i));
-        upperWinLoss = evalWinLoss(upperDelta);
-        if(upperWinLoss >= 0)
-          break;
-      }
-    }
-    else {
-      //Winning, so this is the upper bound
-      upperDelta = 0.0;
-      upperWinLoss = winLossZero;
-      for(int i = 0; i<=5; i++) {
-        lowerDelta = -round(pow(2.0,i));
-        lowerWinLoss = evalWinLoss(lowerDelta);
-        if(lowerWinLoss <= 0)
-          break;
-      }
-    }
-  }
-
-  while(upperDelta - lowerDelta > 0.50001) {
-    double midDelta = 0.5 * (lowerDelta + upperDelta);
-    double midWinLoss = evalWinLoss(midDelta);
-    if(midWinLoss < 0) {
-      lowerDelta = midDelta;
-      lowerWinLoss = midWinLoss;
-    }
-    else {
-      upperDelta = midDelta;
-      upperWinLoss = midWinLoss;
-    }
-  }
-  //Floating point math should be exact to multiples of 0.5 so this should hold *exactly*.
-  assert(upperDelta - lowerDelta == 0.5);
-
-  double finalDelta;
-  //If the winLoss are crossed, potentially due to noise, then just pick the average
-  if(lowerWinLoss >= upperWinLoss - 1e-30)
-    finalDelta = 0.5 * (lowerDelta + upperDelta);
-  //If 0 is outside of the range, then choose the endpoint of the range.
-  else if(upperWinLoss <= 0)
-    finalDelta = upperDelta;
-  else if(lowerWinLoss >= 0)
-    finalDelta = lowerDelta;
-  //Interpolate
-  else
-    finalDelta = lowerDelta + (upperDelta - lowerDelta) * (0-lowerWinLoss) / (upperWinLoss-lowerWinLoss);
-
-  double newKomi = hist.rules.komi + finalDelta;
-  // cout << "Final " << finalDelta << " " << newKomi << endl;
-
-  hist.setKomi(oldKomi);
-  return newKomi;
-}
-
-void PlayUtils::adjustKomiToEven(
-  Search* botB,
-  Search* botW,
-  const Board& board,
-  BoardHistory& hist,
-  Player pla,
-  int64_t numVisits,
-  const OtherGameProperties& otherGameProps,
-  Rand& rand
-) {
-  map<float,std::pair<double,double>> scoreWLCache;
-  bool looseClipping = false;
-  double newKomi = getNaiveEvenKomiHelper(scoreWLCache,botB,botW,board,hist,pla,numVisits,otherGameProps,looseClipping);
-  double lower = floor(newKomi * 2.0) * 0.5;
-  double upper = lower + 0.5;
-  if(rand.nextBool((newKomi - lower) / (upper - lower)))
-    newKomi = upper;
-  else
-    newKomi = lower;
-  hist.setKomi(PlayUtils::roundAndClipKomi(newKomi,board,looseClipping));
-}
-
-float PlayUtils::computeLead(
-  Search* botB,
-  Search* botW,
-  const Board& board,
-  BoardHistory& hist,
-  Player pla,
-  int64_t numVisits,
-  const OtherGameProperties& otherGameProps
-) {
-  map<float,std::pair<double,double>> scoreWLCache;
-  bool looseClipping = true;
-  float oldKomi = hist.rules.komi;
-  double naiveKomi = getNaiveEvenKomiHelper(scoreWLCache,botB,botW,board,hist,pla,numVisits,otherGameProps,looseClipping);
-
-  bool granularityIsCoarse = hist.rules.scoringRule == Rules::SCORING_AREA && !hist.rules.hasButton;
-  if(!granularityIsCoarse) {
-    assert(hist.rules.komi == oldKomi);
-    return (float)(oldKomi - naiveKomi);
-  }
-
-  auto evalWinLoss = [&](double newKomi) {
-    double winLoss = evalKomi(scoreWLCache,botB,botW,board,hist,pla,numVisits,otherGameProps,PlayUtils::roundAndClipKomi(newKomi,board,looseClipping)).second;
-    // cout << "Delta " << delta << " wr " << winLoss << endl;
-    return winLoss;
-  };
-
-  //Smooth over area scoring 2-point granularity
-
-  //If komi is exactly an integer, then we're good.
-  if(naiveKomi == round(naiveKomi)) {
-    assert(hist.rules.komi == oldKomi);
-    return (float)(oldKomi - naiveKomi);
-  }
-
-  double lower = floor(naiveKomi * 2.0) * 0.5;
-  double upper = lower + 0.5;
-
-  //Average out the oscillation
-  double lowerWinLoss = 0.5 * (evalWinLoss(upper) + evalWinLoss(lower-0.5));
-  double upperWinLoss = 0.5 * (evalWinLoss(upper + 0.5) + evalWinLoss(lower));
-
-  //If the winLoss are crossed, potentially due to noise, then just pick the average
-  double result;
-  if(lowerWinLoss >= upperWinLoss - 1e-30)
-    result = 0.5 * (lower + upper);
-  else {
-    //Interpolate
-    result = lower + (upper - lower) * (0-lowerWinLoss) / (upperWinLoss-lowerWinLoss);
-    //Bound the result to be within lower-0.5 and upper+0.5
-    if(result < lower-0.5) result = lower-0.5;
-    if(result > upper+0.5) result = upper+0.5;
-  }
-  assert(hist.rules.komi == oldKomi);
-  return (float)(oldKomi - result);
-}
-
-
 double PlayUtils::getSearchFactor(
   double searchFactorWhenWinningThreshold,
   double searchFactorWhenWinning,
@@ -645,7 +291,7 @@   double searchFactor = 1.0;
   if(recentWinLossValues.size() >= 3 && params.winLossUtilityFactor - searchFactorWhenWinningThreshold > 1e-10) {
     double recentLeastWinning = pla == P_BLACK ? -params.winLossUtilityFactor : params.winLossUtilityFactor;
-    for(size_t i = recentWinLossValues.size()-3; i < recentWinLossValues.size(); i++) {
+    for(int i = recentWinLossValues.size()-3; i < recentWinLossValues.size(); i++) {
       if(pla == P_BLACK && recentWinLossValues[i] > recentLeastWinning)
         recentLeastWinning = recentWinLossValues[i];
       if(pla == P_WHITE && recentWinLossValues[i] < recentLeastWinning)
@@ -658,6 +304,11 @@     }
   }
   return searchFactor;
+}
+
+void PlayUtils::adjustKomiToEven(Search* botB, Search* botW, const Board& board, BoardHistory& hist, Player pla, int64_t numVisits, const OtherGameProperties& otherGameProps, Rand& rand)
+{
+
 }
 
 vector<double> PlayUtils::computeOwnership(
@@ -675,14 +326,13 @@   SearchParams newParams = getNoiselessParams(oldParams,numVisits);
   newParams.playoutDoublingAdvantagePla = C_EMPTY;
   newParams.playoutDoublingAdvantage = 0.0;
-  //Make sure the search is always from a state where the game isn't believed to end with another pass
-  newParams.conservativePass = true;
 
   bot->setParams(newParams);
   bot->setPosition(pla,board,hist);
   bot->runWholeSearch(pla);
 
-  vector<double> ownerships = bot->getAverageTreeOwnership();
+  int64_t minVisitsForOwnership = 2;
+  vector<double> ownerships = bot->getAverageTreeOwnership(minVisitsForOwnership);
 
   bot->setParams(oldParams);
   bot->setAlwaysIncludeOwnerMap(oldAlwaysIncludeOwnerMap);
@@ -691,111 +341,6 @@   return ownerships;
 }
 
-//Tromp-taylor-like scoring, except recognizes pass-dead stones.
-vector<bool> PlayUtils::computeAnticipatedStatusesSimple(
-  const Board& board,
-  const BoardHistory& hist
-) {
-  vector<bool> isAlive(Board::MAX_ARR_SIZE,false);
-
-  //Treat all stones as alive under a no result
-  if(hist.isGameFinished && hist.isNoResult) {
-    for(int y = 0; y<board.y_size; y++) {
-      for(int x = 0; x<board.x_size; x++) {
-        Loc loc = Location::getLoc(x,y,board.x_size);
-        if(board.colors[loc] != C_EMPTY)
-          isAlive[loc] = true;
-      }
-    }
-  }
-  //Else use Tromp-taylorlike scoring, except recognizing pass-dead stones.
-  else {
-    Color area[Board::MAX_ARR_SIZE];
-    BoardHistory histCopy = hist;
-    histCopy.endAndScoreGameNow(board,area);
-    for(int y = 0; y<board.y_size; y++) {
-      for(int x = 0; x<board.x_size; x++) {
-        Loc loc = Location::getLoc(x,y,board.x_size);
-        if(board.colors[loc] != C_EMPTY) {
-          isAlive[loc] = board.colors[loc] == area[loc];
-        }
-      }
-    }
-  }
-  return isAlive;
-}
-
-//Always non-tromp-taylorlike in the main phase of the game, this is the ownership that users would want.
-vector<bool> PlayUtils::computeAnticipatedStatusesWithOwnership(
-  Search* bot,
-  const Board& board,
-  const BoardHistory& hist,
-  Player pla,
-  int64_t numVisits,
-  vector<double>& ownershipsBuf
-) {
-  vector<bool> isAlive(Board::MAX_ARR_SIZE,false);
-  bool solved[Board::MAX_ARR_SIZE];
-  for(int i = 0; i<Board::MAX_ARR_SIZE; i++) {
-    isAlive[i] = false;
-    solved[i] = false;
-  }
-
-  ownershipsBuf = computeOwnership(bot,board,hist,pla,numVisits);
-  const vector<double>& ownerships = ownershipsBuf;
-  int nnXLen = bot->nnXLen;
-  int nnYLen = bot->nnYLen;
-
-  //Heuristic:
-  //Stones are considered dead if their average ownership is less than 0.2 equity in their own color,
-  //or if the worst equity in the chain is less than -0.6 equity in their color.
-  const double avgThresholdForLife = 0.2;
-  const double worstThresholdForLife = -0.6;
-
-  for(int y = 0; y<board.y_size; y++) {
-    for(int x = 0; x<board.x_size; x++) {
-      Loc loc = Location::getLoc(x,y,board.x_size);
-      if(solved[loc])
-        continue;
-
-      if(board.colors[loc] == P_WHITE || board.colors[loc] == P_BLACK) {
-        int pos = NNPos::locToPos(loc,board.x_size,nnXLen,nnYLen);
-        double minOwnership = ownerships[pos];
-        double maxOwnership = ownerships[pos];
-        double ownershipSum = 0.0;
-        double count = 0;
-
-        //Run through the whole chain
-        Loc cur = loc;
-        do {
-          pos = NNPos::locToPos(cur,board.x_size,nnXLen,nnYLen);
-          minOwnership = std::min(ownerships[pos],minOwnership);
-          maxOwnership = std::max(ownerships[pos],maxOwnership);
-          ownershipSum += ownerships[pos];
-          count += 1.0;
-          cur = board.next_in_chain[cur];
-        } while (cur != loc);
-
-        double avgOwnership = ownershipSum / count;
-        bool alive;
-        if(board.colors[loc] == P_WHITE)
-          alive = avgOwnership > avgThresholdForLife && minOwnership > worstThresholdForLife;
-        else
-          alive = avgOwnership < -avgThresholdForLife && maxOwnership < -worstThresholdForLife;
-
-        //Run through the whole chain again, recording the result
-        cur = loc;
-        do {
-          isAlive[cur] = alive;
-          solved[cur] = true;
-          cur = board.next_in_chain[cur];
-        } while (cur != loc);
-      }
-    }
-  }
-  return isAlive;
-
-}
 
 string PlayUtils::BenchmarkResults::toStringNotDone() const {
   ostringstream out;
@@ -888,8 +433,6 @@ ) {
   //Pick random positions from the SGF file, but deterministically
   vector<Move> moves = sgf->moves;
-  if(moves.size() > 0xFFFF)
-    moves.resize(0xFFFF);
   string posSeed = "benchmarkPosSeed|";
   for(int i = 0; i<moves.size(); i++) {
     posSeed += Global::intToString((int)moves[i].loc);
@@ -903,7 +446,7 @@       possiblePositionIdxs.push_back(i);
     }
     if(possiblePositionIdxs.size() > 0) {
-      for(int i = (int)possiblePositionIdxs.size()-1; i > 1; i--) {
+      for(int i = possiblePositionIdxs.size()-1; i > 1; i--) {
         int r = posRand.nextUInt(i);
         int tmp = possiblePositionIdxs[i];
         possiblePositionIdxs[i] = possiblePositionIdxs[r];
@@ -918,7 +461,7 @@ 
   BenchmarkResults results;
   results.numThreads = params.numThreads;
-  results.totalPositions = (int)possiblePositionIdxs.size();
+  results.totalPositions = possiblePositionIdxs.size();
 
   nnEval->clearCache();
   nnEval->clearStats();
@@ -1005,203 +548,12 @@ }
 
 Rules PlayUtils::genRandomRules(Rand& rand) {
-  vector<int> allowedKoRules = { Rules::KO_SIMPLE, Rules::KO_POSITIONAL, Rules::KO_SITUATIONAL };
-  vector<int> allowedScoringRules = { Rules::SCORING_AREA, Rules::SCORING_TERRITORY };
   vector<int> allowedTaxRules = { Rules::TAX_NONE, Rules::TAX_SEKI, Rules::TAX_ALL };
 
   Rules rules;
-  rules.koRule = allowedKoRules[rand.nextUInt((uint32_t)allowedKoRules.size())];
-  rules.scoringRule = allowedScoringRules[rand.nextUInt((uint32_t)allowedScoringRules.size())];
-  rules.taxRule = allowedTaxRules[rand.nextUInt((uint32_t)allowedTaxRules.size())];
-  rules.multiStoneSuicideLegal = rand.nextBool(0.5);
-
-  if(rules.scoringRule == Rules::SCORING_AREA)
-    rules.hasButton = rand.nextBool(0.5);
-  else
-    rules.hasButton = false;
+  rules.taxRule = allowedTaxRules[rand.nextUInt(allowedTaxRules.size())];
   return rules;
 }
 
-Loc PlayUtils::maybeCleanupBeforePass(
-  enabled_t cleanupBeforePass,
-  enabled_t friendlyPass,
-  const Player pla,
-  Loc moveLoc,
-  const AsyncBot* bot
-) {
-  if(friendlyPass == enabled_t::True)
-    return moveLoc;
-  const BoardHistory& hist = bot->getRootHist();
-  const Rules& rules = hist.rules;
-  const bool doCleanupBeforePass =
-    cleanupBeforePass == enabled_t::True ? true :
-    cleanupBeforePass == enabled_t::False ? false :
-    (rules.friendlyPassOk == false && rules.scoringRule == Rules::SCORING_AREA);
-  if(doCleanupBeforePass && moveLoc == Board::PASS_LOC && hist.isFinalPhase() && !hist.hasButton) {
-    const Board& board = bot->getRootBoard();
-    const Color* safeArea = bot->getSearch()->rootSafeArea;
-    assert(safeArea != NULL);
-    //Scan the board for any spot that is adjacent to an opponent group that is part of our pass-alive territory.
-    for(int y = 0; y<board.y_size; y++) {
-      for(int x = 0; x<board.x_size; x++) {
-        Loc otherLoc = Location::getLoc(x,y,board.x_size);
-        if(moveLoc == Board::PASS_LOC &&
-           board.colors[otherLoc] == C_EMPTY &&
-           safeArea[otherLoc] == pla &&
-           board.isAdjacentToPla(otherLoc,getOpp(pla)) &&
-           hist.isLegal(board,otherLoc,pla)
-        ) {
-          moveLoc = otherLoc;
-        }
-      }
-    }
-  }
-  return moveLoc;
-}
-
-
-Loc PlayUtils::maybeFriendlyPass(
-  enabled_t cleanupBeforePass,
-  enabled_t friendlyPass,
-  const Player pla,
-  Loc moveLoc,
-  Search* bot,
-  int64_t numVisits
-) {
-  if(cleanupBeforePass == enabled_t::True)
-    return moveLoc;
-  bool shouldProceed;
-  {
-    const Board& board = bot->getRootBoard();
-    const BoardHistory& hist = bot->getRootHist();
-    const Rules& rules = hist.rules;
-    const bool doFriendlyPass =
-      friendlyPass == enabled_t::True ? true :
-      friendlyPass == enabled_t::False ? false :
-      (rules.friendlyPassOk == true && rules.scoringRule == Rules::SCORING_AREA);
-    shouldProceed = (
-      doFriendlyPass &&
-      moveLoc != Board::PASS_LOC &&
-      rules.scoringRule == Rules::SCORING_AREA &&
-      hist.isFinalPhase() &&
-      !hist.hasButton &&
-      hist.passWouldEndPhase(board,pla) &&
-      hist.moveHistory.size() > 0 &&
-      hist.moveHistory[hist.moveHistory.size()-1].pla == getOpp(pla) &&
-      hist.moveHistory[hist.moveHistory.size()-1].loc == Board::PASS_LOC
-    );
-  }
-  if(!shouldProceed)
-    return moveLoc;
-
-  //Make absolutely sure we can restore the bot's old state
-  const Player oldPla = bot->getRootPla();
-  const Board oldBoard = bot->getRootBoard();
-  const BoardHistory oldHist = bot->getRootHist();
-
-  const Board board = bot->getRootBoard();
-  const BoardHistory hist = bot->getRootHist();
-  assert(oldPla == pla);
-
-  if(!hist.isLegal(board,moveLoc,pla))
-    throw StringError("PlayUtils::maybeFriendlyPass called on illegal move " + Location::toString(moveLoc,board));
-
-  vector<double> ownerships;
-  vector<bool> isAlive = computeAnticipatedStatusesWithOwnership(bot, board, hist, pla, numVisits, ownerships);
-
-  //Delete all dead groups from board
-  Board cleanBoard = board;
-  for(int y = 0; y<board.y_size; y++) {
-    for(int x = 0; x<board.x_size; x++) {
-      Loc loc = Location::getLoc(x,y,board.x_size);
-      if(board.colors[loc] != C_EMPTY && !isAlive[loc])
-        cleanBoard.setStone(loc, C_EMPTY);
-    }
-  }
-
-  //Now, check if naive floodfilling agrees that all highly-owned spots are surrounded (finished borders)
-  Color area[Board::MAX_ARR_SIZE];
-  {
-    bool nonPassAliveStones = true;
-    bool safeBigTerritories = true;
-    bool unsafeBigTerritories = true;
-    bool isMultiStoneSuicideLegal = hist.rules.multiStoneSuicideLegal;
-    cleanBoard.calculateArea(area, nonPassAliveStones, safeBigTerritories, unsafeBigTerritories, isMultiStoneSuicideLegal);
-  }
-  const double highOwnershipThreshold = 0.75;
-  int nnXLen = bot->nnXLen;
-  int nnYLen = bot->nnYLen;
-  bool foundUnsurroundedSpot = false;
-  for(int y = 0; y<board.y_size && !foundUnsurroundedSpot; y++) {
-    for(int x = 0; x<board.x_size && !foundUnsurroundedSpot; x++) {
-      Loc loc = Location::getLoc(x,y,board.x_size);
-      int pos = NNPos::locToPos(loc,board.x_size,nnXLen,nnYLen);
-      if(ownerships[pos] > highOwnershipThreshold && area[loc] != C_WHITE)
-        foundUnsurroundedSpot = true;
-      if(ownerships[pos] < -highOwnershipThreshold && area[loc] != C_BLACK)
-        foundUnsurroundedSpot = true;
-    }
-  }
-
-  //Also, the location that the bot currently wants to move must not be adjacent to an opponent's living stone or a self stone in atari by living stones.
-  //This means it's a safe dame or protective fill the bot is trying. It's not a very exhaustive check (since there are also prep connect moves)
-  //and maybe has some false positives but it's a free extra check.
-  if(!foundUnsurroundedSpot && !cleanBoard.isAdjacentToPla(moveLoc,getOpp(pla)) && !cleanBoard.wouldBeCapture(moveLoc,getOpp(pla))) {
-
-    //And also, the bot must rate passing as not significantly worse than playing its move
-    SearchParams oldParams = bot->searchParams;
-    SearchParams newParams = getNoiselessParams(oldParams,numVisits);
-    newParams.playoutDoublingAdvantagePla = C_EMPTY;
-    newParams.playoutDoublingAdvantage = 0.0;
-    //Conservative pass makes sure we evaluate the opponent's turn as one in which the game is neither finished nor the opponent
-    //will be able to end the game via passing.
-    newParams.conservativePass = true;
-    bot->setParams(newParams);
-
-    ReportedSearchValues valuesAfterPass;
-    ReportedSearchValues valuesAfterMove;
-
-    {
-      Board boardAfterPass = board;
-      BoardHistory histAfterPass = hist;
-      histAfterPass.makeBoardMoveAssumeLegal(boardAfterPass,Board::PASS_LOC,pla,NULL);
-      Player plaAfterPass = getOpp(pla);
-      bot->setPosition(plaAfterPass,boardAfterPass,histAfterPass);
-      bot->runWholeSearch(plaAfterPass);
-      valuesAfterPass = bot->getRootValuesRequireSuccess();
-    }
-    {
-      Board boardAfterMove = board;
-      BoardHistory histAfterMove = hist;
-      histAfterMove.makeBoardMoveAssumeLegal(boardAfterMove,moveLoc,pla,NULL);
-      Player plaAfterMove = getOpp(pla);
-      bot->setPosition(plaAfterMove,boardAfterMove,histAfterMove);
-      bot->runWholeSearch(plaAfterMove);
-      valuesAfterMove = bot->getRootValuesRequireSuccess();
-    }
-
-    bot->setParams(oldParams);
-    bot->clearSearch();
-
-    if(
-      pla == P_WHITE
-      && valuesAfterPass.utility > valuesAfterMove.utility - 0.1
-      && valuesAfterPass.expectedScore > valuesAfterMove.expectedScore - 0.25
-      && valuesAfterPass.lead > valuesAfterMove.lead - 0.25) {
-      moveLoc = Board::PASS_LOC;
-    }
-    else if(
-      pla == P_BLACK
-      && valuesAfterPass.utility < valuesAfterMove.utility + 0.1
-      && valuesAfterPass.expectedScore < valuesAfterMove.expectedScore + 0.25
-      && valuesAfterPass.lead < valuesAfterMove.lead + 0.25) {
-      moveLoc = Board::PASS_LOC;
-    }
-
-  }
-  //Restore
-  bot->setPosition(oldPla,oldBoard,oldHist);
-
-  return moveLoc;
-}
-
+
+
