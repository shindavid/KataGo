--- cpp/program/playutils.h [lightvector:master]+++ cpp/program/playutils.h [hzyhhzy:Reversi2022]@@ -8,23 +8,8 @@ //This is a grab-bag of various useful higher-level functions that select moves or evaluate the board in various ways.
 
 namespace PlayUtils {
-  //Use the given bot to play free handicap stones, modifying the board and hist in the process and setting the bot's position to it.
-  //Does NOT switch the initial player of the board history to white
-  void playExtraBlack(
-    Search* bot,
-    int numExtraBlack,
-    Board& board,
-    BoardHistory& hist,
-    double temperature,
-    Rand& gameRand
-  );
-
-  //Set board to empty and place fixed handicap stones, raising an exception if invalid
-  void placeFixedHandicap(Board& board, int n);
-
-  ExtraBlackAndKomi chooseExtraBlackAndKomi(
-    float base, float stdev, double allowIntegerProb,
-    double handicapProb, int numExtraBlackFixed,
+  ExtraBlackAndKomi chooseKomi(
+    float base, float stdev, double allowIntegerProb, 
     double bigStdevProb, float bigStdev, double sqrtBoardArea, Rand& rand
   );
   void setKomiWithoutNoise(const ExtraBlackAndKomi& extraBlackAndKomi, BoardHistory& hist); //Also ignores allowInteger
@@ -59,11 +44,20 @@   );
   void initializeGameUsingPolicy(
     Search* botB, Search* botW, Board& board, BoardHistory& hist, Player& pla,
-    Rand& gameRand, bool doEndGameIfAllPassAlive,
+    Rand& gameRand,
     double proportionOfBoardArea, double temperature
   );
 
   float roundAndClipKomi(double unrounded, const Board& board, bool looseClipping);
+
+
+  double getSearchFactor(
+    double searchFactorWhenWinningThreshold,
+    double searchFactorWhenWinning,
+    const SearchParams& params,
+    const std::vector<double>& recentWinLossValues,
+    Player pla
+  );
 
   void adjustKomiToEven(
     Search* botB,
@@ -76,25 +70,6 @@     Rand& rand
   );
 
-  //Lead from WHITE's perspective
-  float computeLead(
-    Search* botB,
-    Search* botW, //can be NULL if only one bot
-    const Board& board,
-    BoardHistory& hist,
-    Player pla,
-    int64_t numVisits,
-    const OtherGameProperties& otherGameProps
-  );
-
-  double getSearchFactor(
-    double searchFactorWhenWinningThreshold,
-    double searchFactorWhenWinning,
-    const SearchParams& params,
-    const std::vector<double>& recentWinLossValues,
-    Player pla
-  );
-
   double getHackedLCBForWinrate(const Search* search, const AnalysisData& data, Player pla);
 
   std::vector<double> computeOwnership(
@@ -103,26 +78,6 @@     const BoardHistory& hist,
     Player pla,
     int64_t numVisits
-  );
-
-  //Determine all living and dead stones, if the game were terminated right now and
-  //the rules were interpreted naively and directly.
-  //Returns a vector indexed by board Loc (length Board::MAX_ARR_SIZE).
-  std::vector<bool> computeAnticipatedStatusesSimple(
-    const Board& board,
-    const BoardHistory& hist
-  );
-
-  //Determine all living and dead stones, trying to be clever and use the ownership prediction
-  //of the neural net.
-  //Returns a vector indexed by board Loc (length Board::MAX_ARR_SIZE).
-  std::vector<bool> computeAnticipatedStatusesWithOwnership(
-    Search* bot,
-    const Board& board,
-    const BoardHistory& hist,
-    Player pla,
-    int64_t numVisits,
-    std::vector<double>& ownershipsBuf
   );
 
 
@@ -160,22 +115,6 @@ 
   Rules genRandomRules(Rand& rand);
 
-  Loc maybeCleanupBeforePass(
-    enabled_t cleanupBeforePass,
-    enabled_t friendlyPass,
-    const Player pla,
-    Loc moveLoc,
-    const AsyncBot* bot
-  );
-
-  Loc maybeFriendlyPass(
-    enabled_t cleanupBeforePass,
-    enabled_t friendlyPass,
-    const Player pla,
-    Loc moveLoc,
-    Search* bot,
-    int64_t numVisits
-  );
 
 }
 
