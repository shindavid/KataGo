--- cpp/core/rand.cpp [lightvector:master]+++ cpp/core/rand.cpp [hzyhhzy:Reversi2022]@@ -322,7 +322,7 @@ {
   assert(n > 0);
   assert(n < 0xFFFFFFFF);
-  double sum = cumRelProbs[n-1];
+  double_t sum = cumRelProbs[n-1];
   double d = nextDouble(sum);
   size_t r = BSearch::findFirstGt(cumRelProbs,d,0,n);
   if(r == n)
@@ -507,7 +507,8 @@     out << Hash::murmurMix(12345) << endl;
     out << Hash::murmurMix(298174913) << endl;
     out << Hash::splitMix64(1234567) << endl;
-    out << Hash::splitMix64((uint64_t)1234567 + (uint64_t)0x9e3779b97f4a7c15ULL) << endl;
+    out << Hash::splitMix64(1234567 + (uint64_t)0x9e3779b97f4a7c15ULL) << endl;
+    out << Hash::splitMix64(1234567 + 2*(uint64_t)0x9e3779b97f4a7c15ULL) << endl;
     out << Global::uint64ToHexString(Hash::rrmxmx(0)) << endl;
     out << Global::uint64ToHexString(Hash::rrmxmx(1)) << endl;
     out << Global::uint64ToHexString(Hash::rrmxmx(0x0123456789abcdefULL)) << endl;
@@ -520,6 +521,7 @@ 8421665786179357259
 6457827717110365317
 3203168211198807973
+9817491932198370423
 0000000000000000
 23085D6F7A569905
 C337A528D7E42497
@@ -529,36 +531,6 @@ 3289B8F0A1EA039B
 )%%";
     TestCommon::expect(name,out,expected);
-  }
-
-  for(int i = -10000; i<10000; i++) {
-    {
-      testAssert(i == Global::stringToInt(Global::intToString(i)));
-    }
-    {
-      int64_t x = (int64_t)i;
-      testAssert(x == Global::stringToInt64(Global::int64ToString(x)));
-    }
-    {
-      uint64_t x = (uint64_t)i;
-      testAssert(x == Global::stringToUInt64(Global::uint64ToString(x)));
-    }
-    {
-      uint64_t x = (uint64_t)i;
-      testAssert(x == Global::hexStringToUInt64(Global::uint64ToHexString(x)));
-    }
-    {
-      float x = (float)i / 100.0f;
-      testAssert(x == Global::stringToFloat(Global::floatToString(x)));
-    }
-    {
-      double x = (double)i / 100.0;
-      testAssert(x == Global::stringToDouble(Global::doubleToString(x)));
-    }
-    {
-      double x = (double)i / 1739.3;
-      testAssert(x == Global::stringToDouble(Global::doubleToStringHighPrecision(x)));
-    }
   }
 
   {
