--- cpp/core/config_parser.h [lightvector:master]+++ cpp/core/config_parser.h [hzyhhzy:Reversi2022]@@ -18,10 +18,9 @@ 
 class ConfigParser {
  public:
-  ConfigParser(bool keysOverride = false, bool keysOverrideFromIncludes = true);
-  ConfigParser(const std::string& file, bool keysOverride = false, bool keysOverrideFromIncludes = true);
-  ConfigParser(const char *file, bool keysOverride = false, bool keysOverrideFromIncludes = true);
-  ConfigParser(std::istream& in, bool keysOverride = false, bool keysOverrideFromIncludes = true);
+  ConfigParser();
+  ConfigParser(const std::string& file);
+  ConfigParser(std::istream& in);
   ConfigParser(const std::map<std::string, std::string>& kvs);
   ConfigParser(const ConfigParser& source);
   ~ConfigParser();
@@ -35,7 +34,6 @@   void initialize(const std::map<std::string, std::string>& kvs);
 
   void overrideKey(const std::string& key, const std::string& value);
-  void overrideKeys(const std::string& fname);
   void overrideKeys(const std::map<std::string, std::string>& newkvs);
   //mutexKeySets: For each pair of sets (A,B), if newkvs contains anything in A, erase every existing key that overlaps with B, and vice versa.
   void overrideKeys(const std::map<std::string, std::string>& newkvs, const std::vector<std::pair<std::set<std::string>,std::set<std::string>>>& mutexKeySets);
@@ -49,7 +47,6 @@   std::vector<std::string> unusedKeys() const;
   std::string getFileName() const;
   std::string getContents() const;
-  std::string getAllKeyVals() const;
 
   bool contains(const std::string& key) const;
   bool containsAny(const std::vector<std::string>& possibleKeys) const;
@@ -94,31 +91,10 @@   std::string contents;
   std::map<std::string, std::string> keyValues;
 
-  // If true, overriding keys within the same file is possible
-  bool keysOverrideEnabled;
-  // If true (default), overriding keys from included files is possible
-  bool keysOverrideFromIncludes;
-
-  // Current reading state variables
-  // Current filename being processed (can differ from fileName in case of using @include directive)
-  int curLineNum = 0;
-  std::string curFilename;
-  std::vector<std::string> includedFiles;
-
-  // Internal stack for tracking the file path as we process recursive includes.
-  std::vector<std::string> baseDirs;
-
-  // Currently unused. Messages tracking what overrides occurred.
-  std::vector<std::string> logMessages;
-
   mutable std::mutex usedKeysMutex;
   std::set<std::string> usedKeys;
 
   void initializeInternal(std::istream& in);
-  void processIncludedFile(const std::string& fname);
-  void readStreamContent(std::istream& in);
-  std::string lineAndFileInfo() const;
-  std::string extractBaseDir(const std::string &fname);
 };
 
 
