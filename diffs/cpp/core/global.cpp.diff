--- cpp/core/global.cpp [lightvector:master]+++ cpp/core/global.cpp [hzyhhzy:Reversi2022]@@ -71,7 +71,7 @@ string Global::doubleToStringHighPrecision(double x)
 {
   stringstream ss;
-  ss.precision(17);
+  ss.precision(16);
   ss << x;
   return ss.str();
 }
@@ -184,32 +184,17 @@ bool Global::tryStringToUInt64(const string& str, uint64_t& x)
 {
   uint64_t val = 0;
-  string s = trim(str);
-  if(s.size() > 0 && s[0] == '-')
-    return false;
-  istringstream in(s);
-  in >> val;
-  if(in.fail() || in.peek() != EOF)
-    return false;
-  x = val;
-  return true;
-}
-
-bool Global::tryHexStringToUInt64(const string& str, uint64_t& x)
-{
-  uint64_t val = 0;
-  for(char c: str) {
-    if(!(c >= '0' && c <= '9') &&
-       !(c >= 'A' && c <= 'F') &&
-       !(c >= 'a' && c <= 'f')
-    ) {
+  istringstream in(trim(str));
+  in >> val;
+  if(in.fail() || in.peek() != EOF)
+  {
+    istringstream inhex(trim(str));
+    inhex >> hex >> val;
+    if(inhex.fail() || inhex.peek() != EOF)
       return false;
-    }
-  }
-  istringstream in(str);
-  in >> std::hex >> val;
-  if(in.fail() || in.peek() != EOF)
-    return false;
+    x = val;
+    return true;
+  }
   x = val;
   return true;
 }
@@ -223,15 +208,6 @@   return val;
 }
 
-uint64_t Global::hexStringToUInt64(const string& str)
-{
-  uint64_t val;
-  bool suc = tryHexStringToUInt64(str,val);
-  if(!suc)
-    throw IOError(string("could not parse uint64 from hex: ") + str);
-  return val;
-}
-
 bool Global::tryStringToFloat(const string& str, float& x)
 {
   float val = 0;
@@ -313,12 +289,13 @@   return s.substr(0,s.size()-suffix.size());
 }
 
-string Global::trim(const std::string &s, const char* delims)
-{
-  size_t p2 = s.find_last_not_of(delims);
+
+string Global::trim(const string& s)
+{
+  size_t p2 = s.find_last_not_of(" \t\r\n\v\f");
   if (p2 == string::npos)
     return string();
-  size_t p1 = s.find_first_not_of(delims);
+  size_t p1 = s.find_first_not_of(" \t\r\n\v\f");
   if (p1 == string::npos)
     p1 = 0;
 
@@ -684,18 +661,3 @@   cout << "Press any key to continue..." << endl;
   cin.get();
 }
-
-double Global::roundStatic(double x, double inverseScale) {
-  return round(x * inverseScale) / inverseScale;
-}
-double Global::roundDynamic(double x, int precision) {
-  double absx = std::fabs(x);
-  if(absx <= 1e-60)
-    return x;
-  int orderOfMagnitude = (int)floor(log10(absx));
-  int roundingMagnitude = orderOfMagnitude - precision;
-  if(roundingMagnitude >= 0)
-    return round(x);
-  double inverseScale = pow(10.0,-roundingMagnitude);
-  return roundStatic(x, inverseScale);
-}
