--- cpp/core/logger.cpp [lightvector:master]+++ cpp/core/logger.cpp [hzyhhzy:Reversi2022]@@ -2,62 +2,12 @@ 
 #include "../core/datetime.h"
 #include "../core/fileutils.h"
-#include "../core/config_parser.h"
-#include "../core/rand.h"
-#include "../core/makedir.h"
 
 using namespace std;
 
-Logger::Logger(
-  ConfigParser* cfg,
-  bool logToStdoutDefault,
-  bool logToStderrDefault,
-  bool logTimeDefault,
-  bool logConfigContents_
-):
-  logToStdout(logToStdoutDefault),
-  logToStderr(logToStderrDefault),
-  logTime(logTimeDefault),
-  logConfigContents(logConfigContents_),
-  header(),
-  ostreams(),
-  files(),
-  logBufs(),
-  mutex(),
-  isDisabled(false)
-{
-  if(cfg) {
-    header = "Running with following config:\n" + cfg->getAllKeyVals();
-    if(cfg->contains("logToStdout"))
-      logToStdout = cfg->getBool("logToStdout");
-
-    if(cfg->contains("logToStderr"))
-      logToStderr = cfg->getBool("logToStderr");
-
-    if(cfg->contains("logTimeStamp"))
-      logTime = cfg->getBool("logTimeStamp");
-
-    if((int)cfg->contains("logFile") + (int)cfg->contains("logDir") + (int)cfg->contains("logDirDated") > 1)
-      throw StringError("Cannot specify more than one of logFile and logDir and logDirDated in config");
-    else if(cfg->contains("logFile"))
-      addFile(cfg->getString("logFile"), false);
-    else if(cfg->contains("logDir")) {
-      MakeDir::make(cfg->getString("logDir"));
-      Rand rand;
-      addFile(cfg->getString("logDir") + "/" + DateTime::getCompactDateTimeString() + "-" + Global::uint32ToHexString(rand.nextUInt()) + ".log", false);
-    }
-    else if(cfg->contains("logDirDated")) {
-      MakeDir::make(cfg->getString("logDirDated"));
-      Rand rand;
-      MakeDir::make(cfg->getString("logDirDated") + "/" + DateTime::getCompactDateTimeString());
-      addFile(cfg->getString("logDirDated") + "/" + DateTime::getCompactDateTimeString() + "/" + Global::uint32ToHexString(rand.nextUInt()) + ".log", false);
-    }
-  }
-
-  if(!header.empty()) {
-    write(header);
-  }
-}
+Logger::Logger()
+  :logToStdout(false),logToStderr(false),logTime(true),ostreams(),files()
+{}
 
 Logger::~Logger()
 {
@@ -78,16 +28,19 @@   return logToStderr;
 }
 
-void Logger::addOStream(ostream& out, bool afterCreation) {
-  lock_guard<std::mutex> lock(mutex);
+void Logger::setLogToStdout(bool b) {
+  logToStdout = b;
+}
+void Logger::setLogToStderr(bool b) {
+  logToStderr = b;
+}
+void Logger::setLogTime(bool b) {
+  logTime = b;
+}
+void Logger::addOStream(ostream& out) {
   ostreams.push_back(&out);
-
-  if(afterCreation && !header.empty()) {
-    time_t time = DateTime::getNow();
-    writeLocked(header, true, out, time);
-  }
 }
-void Logger::addFile(const string& file, bool afterCreation) {
+void Logger::addFile(const string& file) {
   if(file == "")
     return;
   ofstream* out = new ofstream();
@@ -101,57 +54,36 @@     delete out;
     return;
   }
-
-  lock_guard<std::mutex> lock(mutex);
   files.push_back(out);
-
-  if(afterCreation && !header.empty()) {
-    time_t time = DateTime::getNow();
-    writeLocked(header, true, *out, time);
-  }
-}
-
-void Logger::setDisabled(bool b) {
-  lock_guard<std::mutex> lock(mutex);
-  isDisabled = b;
 }
 
 void Logger::write(const string& str, bool endLine) {
   lock_guard<std::mutex> lock(mutex);
   time_t time = DateTime::getNow();
+  const char* timeFormat = "%F %T%z: ";
 
   if(logToStdout) {
-    writeLocked(str, endLine, cout, time);
+    if(logTime) { DateTime::writeTimeToStream(cout, timeFormat, time); cout << str; }
+    else cout << ": " << str;
+    if(endLine) cout << std::endl; else cout << std::flush;
   }
   if(logToStderr) {
-    writeLocked(str, endLine, cerr, time);
+    if(logTime) { DateTime::writeTimeToStream(cerr, timeFormat, time); cerr << str; }
+    else cerr << ": " << str;
+    if(endLine) cerr << std::endl; else cerr << std::flush;
   }
   for(size_t i = 0; i<ostreams.size(); i++) {
     ostream& out = *(ostreams[i]);
-    writeLocked(str, endLine, out, time);
+    if(logTime) { DateTime::writeTimeToStream(out, timeFormat, time); out << str; }
+    else out << ": " << str;
+    if(endLine) out << std::endl; else out << std::flush;
   }
   for(size_t i = 0; i<files.size(); i++) {
     ofstream& out = *(files[i]);
-    writeLocked(str, endLine, out, time);
+    if(logTime) { DateTime::writeTimeToStream(out, timeFormat, time); out << str; }
+    else out << ": " << str;
+    if(endLine) out << std::endl; else out << std::flush;
   }
-}
-
-void Logger::writeLocked(const std::string &str, bool endLine, std::ostream &out, const time_t& time)
-{
-  if(isDisabled)
-    return;
-  const char* timeFormat = "%F %T%z: ";
-
-  if(logTime) {
-    DateTime::writeTimeToStream(out, timeFormat, time);
-    out << str;
-  }
-  else
-    out << ": " << str;
-  if(endLine)
-    out << std::endl;
-  else
-    out << std::flush;
 }
 
 void Logger::write(const string& str) {
