--- cpp/core/logger.h [lightvector:master]+++ cpp/core/logger.h [hzyhhzy:Reversi2022]@@ -8,19 +8,10 @@ #include "../core/multithread.h"
 
 class LogBuf;
-class ConfigParser;
 
 class Logger {
  public:
-  Logger(
-    ConfigParser* cfg = nullptr,
-    // The following are defaults that may be overriden by the user in the config.
-    bool logToStdoutDefault = false,
-    bool logToStderrDefault = false,
-    bool logTimeDefault = true,
-    //Log config contents on startup?
-    bool logConfigContents = true
-  );
+  Logger();
   ~Logger();
 
   Logger(const Logger& other) = delete;
@@ -29,40 +20,31 @@   bool isLoggingToStdout() const;
   bool isLoggingToStderr() const;
 
-  void addOStream(std::ostream& out, bool afterCreation = true); // User responsible for cleaning up the ostream, logger does not take ownership
-  void addFile(const std::string& file, bool afterCreation = true);
+  void setLogToStdout(bool b);
+  void setLogToStderr(bool b);
+  void setLogTime(bool b);
+  void addOStream(std::ostream& out); //User responsible for cleaning up the ostream, logger does not take ownership
+  void addFile(const std::string& file);
 
-  void setDisabled(bool b);
-
-  // write and ostreams returned are synchronized with other calls to write and other ostream calls
-  // The lifetime of the Logger must exceed the lifetimes of any of the ostreams created from it.
-  // The caller is responsible for freeing the ostreams
+  //write and ostreams returned are synchronized with other calls to write and other ostream calls
+  //The lifetime of the Logger must exceed the lifetimes of any of the ostreams created from it.
+  //The caller is responsible for freeing the ostreams
   void write(const std::string& str);
   void writeNoEndline(const std::string& str);
+  std::ostream* createOStream();
 
   static void logThreadUncaught(const std::string& name, Logger* logger, std::function<void()> f);
 
  private:
-  //------------
-  // Constant after initialization
   bool logToStdout;
   bool logToStderr;
   bool logTime;
-  bool logConfigContents;
-  std::string header;
-
-  //------------
-
   std::vector<std::ostream*> ostreams;
   std::vector<std::ofstream*> files;
   std::vector<LogBuf*> logBufs;
   std::mutex mutex;
 
-  bool isDisabled;
-
   void write(const std::string& str, bool endLine);
-  void writeLocked(const std::string& str, bool endLine, std::ostream& out, const time_t& time);
-  std::ostream* createOStream();
 };
 
 class LogBuf final : public std::stringbuf {
