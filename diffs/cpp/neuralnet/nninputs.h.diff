--- cpp/neuralnet/nninputs.h [lightvector:master]+++ cpp/neuralnet/nninputs.h [hzyhhzy:Reversi2022]@@ -32,32 +32,16 @@ 
 struct MiscNNInputParams {
   double drawEquivalentWinsForWhite = 0.5;
-  bool conservativePass = false;
   double playoutDoublingAdvantage = 0.0;
   float nnPolicyTemperature = 1.0f;
-  bool avoidMYTDaggerHack = false;
   // If no symmetry is specified, it will use default or random based on config, unless node is already cached.
   int symmetry = NNInputs::SYMMETRY_NOTSPECIFIED;
 
-  static const Hash128 ZOBRIST_CONSERVATIVE_PASS;
   static const Hash128 ZOBRIST_PLAYOUT_DOUBLINGS;
   static const Hash128 ZOBRIST_NN_POLICY_TEMP;
-  static const Hash128 ZOBRIST_AVOID_MYTDAGGER_HACK;
 };
 
 namespace NNInputs {
-  const int NUM_FEATURES_SPATIAL_V3 = 22;
-  const int NUM_FEATURES_GLOBAL_V3 = 14;
-
-  const int NUM_FEATURES_SPATIAL_V4 = 22;
-  const int NUM_FEATURES_GLOBAL_V4 = 14;
-
-  const int NUM_FEATURES_SPATIAL_V5 = 13;
-  const int NUM_FEATURES_GLOBAL_V5 = 12;
-
-  const int NUM_FEATURES_SPATIAL_V6 = 22;
-  const int NUM_FEATURES_GLOBAL_V6 = 16;
-
   const int NUM_FEATURES_SPATIAL_V7 = 22;
   const int NUM_FEATURES_GLOBAL_V7 = 19;
 
@@ -66,22 +50,6 @@     const MiscNNInputParams& nnInputParams
   );
 
-  void fillRowV3(
-    const Board& board, const BoardHistory& boardHistory, Player nextPlayer,
-    const MiscNNInputParams& nnInputParams, int nnXLen, int nnYLen, bool useNHWC, float* rowBin, float* rowGlobal
-  );
-  void fillRowV4(
-    const Board& board, const BoardHistory& boardHistory, Player nextPlayer,
-    const MiscNNInputParams& nnInputParams, int nnXLen, int nnYLen, bool useNHWC, float* rowBin, float* rowGlobal
-  );
-  void fillRowV5(
-    const Board& board, const BoardHistory& boardHistory, Player nextPlayer,
-    const MiscNNInputParams& nnInputParams, int nnXLen, int nnYLen, bool useNHWC, float* rowBin, float* rowGlobal
-  );
-  void fillRowV6(
-    const Board& board, const BoardHistory& boardHistory, Player nextPlayer,
-    const MiscNNInputParams& nnInputParams, int nnXLen, int nnYLen, bool useNHWC, float* rowBin, float* rowGlobal
-  );
   void fillRowV7(
     const Board& board, const BoardHistory& boardHistory, Player nextPlayer,
     const MiscNNInputParams& nnInputParams, int nnXLen, int nnYLen, bool useNHWC, float* rowBin, float* rowGlobal
@@ -196,32 +164,9 @@ //Utility functions for computing the "scoreValue", the unscaled utility of various numbers of points, prior to multiplication by
 //staticScoreUtilityFactor or dynamicScoreUtilityFactor (see searchparams.h)
 namespace ScoreValue {
-  //MUST BE CALLED AT PROGRAM START!
-  void initTables();
-  void freeTables();
 
   //The number of wins a game result should count as
   double whiteWinsOfWinner(Player winner, double drawEquivalentWinsForWhite);
-  //The score difference that a game result should count as on average
-  double whiteScoreDrawAdjust(double finalWhiteMinusBlackScore, double drawEquivalentWinsForWhite, const BoardHistory& hist);
-
-  //The unscaled utility of achieving a certain score difference
-  double whiteScoreValueOfScoreSmooth(double finalWhiteMinusBlackScore, double center, double scale, double drawEquivalentWinsForWhite, const Board& b, const BoardHistory& hist);
-  double whiteScoreValueOfScoreSmoothNoDrawAdjust(double finalWhiteMinusBlackScore, double center, double scale, const Board& b);
-  //Approximately invert whiteScoreValueOfScoreSmooth
-  double approxWhiteScoreOfScoreValueSmooth(double scoreValue, double center, double scale, const Board& b);
-  //The derviative of whiteScoreValueOfScoreSmoothNoDrawAdjust with respect to finalWhiteMinusBlackScore.
-  double whiteDScoreValueDScoreSmoothNoDrawAdjust(double finalWhiteMinusBlackScore, double center, double scale, const Board& b);
-
-  //Compute what the scoreMeanSq should be for a final game result
-  //It is NOT simply the same as finalWhiteMinusBlackScore^2 because for integer komi we model it as a distribution where with the appropriate probability
-  //you gain or lose 0.5 point to achieve the desired drawEquivalentWinsForWhite, so it actually has some variance.
-  double whiteScoreMeanSqOfScoreGridded(double finalWhiteMinusBlackScore, double drawEquivalentWinsForWhite);
-
-  //The expected unscaled utility of the final score difference, given the mean and stdev of the distribution of that difference,
-  //assuming roughly a normal distribution.
-  double expectedWhiteScoreValue(double whiteScoreMean, double whiteScoreStdev, double center, double scale, const Board& b);
-
   //Get the standard deviation of score given the E(score) and E(score^2)
   double getScoreStdev(double scoreMeanAvg, double scoreMeanSqAvg);
 }
