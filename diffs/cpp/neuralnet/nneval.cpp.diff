--- cpp/neuralnet/nneval.cpp [lightvector:master]+++ cpp/neuralnet/nneval.cpp [hzyhhzy:Reversi2022]@@ -588,43 +588,6 @@     return log(1.0 + exp(x));
 }
 
-static const int daggerPattern[9][8] = {
-  {0,0,0,0,0,0,0,0},
-  {0,0,0,0,0,0,0,0},
-  {0,0,2,1,0,0,0,0},
-  {0,0,2,1,0,0,0,0},
-  {0,0,0,0,0,0,0,0},
-  {0,2,1,0,0,0,0,0},
-  {0,3,0,0,0,0,0,0},
-  {0,0,0,0,0,0,0,0},
-  {0,0,0,0,0,0,0,0},
-};
-static bool daggerMatch(const Board& board, Player nextPla, Loc& banned, int symmetry) {
-  for(int yi = 0; yi < 9; yi++) {
-    for(int xi = 0; xi < 8; xi++) {
-      int y = yi;
-      int x = xi;
-      if((symmetry & 0x1) != 0)
-        std::swap(x,y);
-      if((symmetry & 0x2) != 0)
-        x = board.x_size-1-x;
-      if((symmetry & 0x4) != 0)
-        y = board.y_size-1-y;
-      Loc loc = Location::getLoc(x,y,board.x_size);
-      int m = daggerPattern[yi][xi];
-      if(m == 0 && board.colors[loc] != C_EMPTY)
-        return false;
-      if(m == 1 && board.colors[loc] != nextPla)
-        return false;
-      if(m == 2 && board.colors[loc] != getOpp(nextPla))
-        return false;
-      if(m == 3)
-        banned = loc;
-    }
-  }
-  return true;
-}
-
 
 void NNEvaluator::evaluate(
   Board& board,
@@ -691,15 +654,7 @@     }
 
     static_assert(NNModelVersion::latestInputsVersionImplemented == 7, "");
-    if(inputsVersion == 3)
-      NNInputs::fillRowV3(board, history, nextPlayer, nnInputParams, nnXLen, nnYLen, inputsUseNHWC, buf.rowSpatial, buf.rowGlobal);
-    else if(inputsVersion == 4)
-      NNInputs::fillRowV4(board, history, nextPlayer, nnInputParams, nnXLen, nnYLen, inputsUseNHWC, buf.rowSpatial, buf.rowGlobal);
-    else if(inputsVersion == 5)
-      NNInputs::fillRowV5(board, history, nextPlayer, nnInputParams, nnXLen, nnYLen, inputsUseNHWC, buf.rowSpatial, buf.rowGlobal);
-    else if(inputsVersion == 6)
-      NNInputs::fillRowV6(board, history, nextPlayer, nnInputParams, nnXLen, nnYLen, inputsUseNHWC, buf.rowSpatial, buf.rowGlobal);
-    else if(inputsVersion == 7)
+    if(inputsVersion == 7)
       NNInputs::fillRowV7(board, history, nextPlayer, nnInputParams, nnXLen, nnYLen, inputsUseNHWC, buf.rowSpatial, buf.rowGlobal);
     else
       ASSERT_UNREACHABLE;
@@ -768,16 +723,6 @@       isLegal[i] = history.isLegal(board,loc,nextPlayer);
     }
 
-    if(nnInputParams.avoidMYTDaggerHack && xSize >= 13 && ySize >= 13) {
-      for(int symmetry = 0; symmetry < 8; symmetry++) {
-        Loc banned = Board::NULL_LOC;
-        if(daggerMatch(board, nextPlayer, banned, symmetry)) {
-          if(banned != Board::NULL_LOC) {
-            isLegal[NNPos::locToPos(banned,xSize,nnXLen,nnYLen)] = false;
-          }
-        }
-      }
-    }
 
     for(int i = 0; i<policySize; i++) {
       float policyValue;
@@ -831,62 +776,7 @@     //Fix up the value as well. Note that the neural net gives us back the value from the perspective
     //of the player so we need to negate that to make it the white value.
     static_assert(NNModelVersion::latestModelVersionImplemented == 10, "");
-    if(modelVersion == 3) {
-      const double twoOverPi = 0.63661977236758134308;
-
-      double winProb;
-      double lossProb;
-      double noResultProb;
-      //Version 3 neural nets just pack the pre-arctanned scoreValue into the whiteScoreMean field
-      double scoreValue = atan(buf.result->whiteScoreMean) * twoOverPi;
-      {
-        double winLogits = buf.result->whiteWinProb;
-        double lossLogits = buf.result->whiteLossProb;
-        double noResultLogits = buf.result->whiteNoResultProb;
-
-        //Softmax
-        double maxLogits = std::max(std::max(winLogits,lossLogits),noResultLogits);
-        winProb = exp(winLogits - maxLogits);
-        lossProb = exp(lossLogits - maxLogits);
-        noResultProb = exp(noResultLogits - maxLogits);
-
-        double probSum = winProb + lossProb + noResultProb;
-        winProb /= probSum;
-        lossProb /= probSum;
-        noResultProb /= probSum;
-
-        if(!isfinite(probSum) || !isfinite(scoreValue)) {
-          cout << "Got nonfinite for nneval value" << endl;
-          cout << winLogits << " " << lossLogits << " " << noResultLogits << " " << scoreValue << endl;
-          throw StringError("Got nonfinite for nneval value");
-        }
-      }
-
-      if(nextPlayer == P_WHITE) {
-        buf.result->whiteWinProb = (float)winProb;
-        buf.result->whiteLossProb = (float)lossProb;
-        buf.result->whiteNoResultProb = (float)noResultProb;
-        buf.result->whiteScoreMean = (float)ScoreValue::approxWhiteScoreOfScoreValueSmooth(scoreValue,0.0,2.0,board);
-        buf.result->whiteScoreMeanSq = buf.result->whiteScoreMean * buf.result->whiteScoreMean;
-        buf.result->whiteLead = buf.result->whiteScoreMean;
-        buf.result->varTimeLeft = -1;
-        buf.result->shorttermWinlossError = -1;
-        buf.result->shorttermScoreError = -1;
-      }
-      else {
-        buf.result->whiteWinProb = (float)lossProb;
-        buf.result->whiteLossProb = (float)winProb;
-        buf.result->whiteNoResultProb = (float)noResultProb;
-        buf.result->whiteScoreMean = -(float)ScoreValue::approxWhiteScoreOfScoreValueSmooth(scoreValue,0.0,2.0,board);
-        buf.result->whiteScoreMeanSq = buf.result->whiteScoreMean * buf.result->whiteScoreMean;
-        buf.result->whiteLead = buf.result->whiteScoreMean;
-        buf.result->varTimeLeft = -1;
-        buf.result->shorttermWinlossError = -1;
-        buf.result->shorttermScoreError = -1;
-      }
-
-    }
-    else if(modelVersion >= 4 && modelVersion <= 10) {
+    if(modelVersion >= 4 && modelVersion <= 10) {
       double winProb;
       double lossProb;
       double noResultProb;
@@ -907,8 +797,6 @@         double shorttermWinlossErrorPreSoftplus = buf.result->shorttermWinlossError;
         double shorttermScoreErrorPreSoftplus = buf.result->shorttermScoreError;
 
-        if(history.rules.koRule != Rules::KO_SIMPLE && history.rules.scoringRule != Rules::SCORING_TERRITORY)
-          noResultLogits -= 100000.0;
 
         //Softmax
         double maxLogits = std::max(std::max(winLogits,lossLogits),noResultLogits);
@@ -916,8 +804,6 @@         lossProb = exp(lossLogits - maxLogits);
         noResultProb = exp(noResultLogits - maxLogits);
 
-        if(history.rules.koRule != Rules::KO_SIMPLE && history.rules.scoringRule != Rules::SCORING_TERRITORY)
-          noResultProb = 0.0;
 
         double probSum = winProb + lossProb + noResultProb;
         winProb /= probSum;
