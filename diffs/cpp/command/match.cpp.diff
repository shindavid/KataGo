--- cpp/command/match.cpp [lightvector:master]+++ cpp/command/match.cpp [hzyhhzy:Reversi2022]@@ -5,7 +5,6 @@ #include "../core/timer.h"
 #include "../dataio/sgf.h"
 #include "../search/asyncbot.h"
-#include "../search/patternbonustable.h"
 #include "../program/setup.h"
 #include "../program/play.h"
 #include "../command/commandline.h"
@@ -28,7 +27,7 @@ 
 int MainCmds::match(const vector<string>& args) {
   Board::initHash();
-  ScoreValue::initTables();
+   
   Rand seedRand;
 
   ConfigParser cfg;
@@ -59,8 +58,10 @@     return 1;
   }
 
-  Logger logger(&cfg);
+  Logger logger;
   logger.addFile(logFile);
+  bool logToStdout = cfg.getBool("logToStdout");
+  logger.setLogToStdout(logToStdout);
 
   logger.write("Match Engine starting...");
   logger.write(string("Git revision: ") + Version::getGitRevision());
@@ -169,8 +170,6 @@     nnEvalsByBot[i] = nnEvals[whichNNModel[i]];
   }
 
-  std::vector<std::unique_ptr<PatternBonusTable>> patternBonusTables = Setup::loadAvoidSgfPatternBonusTables(cfg,logger);
-  assert(patternBonusTables.size() == numBots);
 
   //Initialize object for randomly pairing bots
   bool forSelfPlay = false;
@@ -183,7 +182,7 @@   //Done loading!
   //------------------------------------------------------------------------------------
   logger.write("Loaded all config stuff, starting matches");
-  if(!logger.isLoggingToStdout())
+  if(!logToStdout)
     cout << "Loaded all config stuff, starting matches" << endl;
 
   if(sgfOutputDir != string())
@@ -201,7 +200,7 @@   std::map<string,double> movesByBotMap;
 
   auto runMatchLoop = [
-    &gameRunner,&matchPairer,&sgfOutputDir,&logger,&gameSeedBase,&patternBonusTables,
+    &gameRunner,&matchPairer,&sgfOutputDir,&logger,&gameSeedBase,
     &statsMutex, &gameCount, &timeUsedByBotMap, &movesByBotMap
   ](
     uint64_t threadHash
@@ -214,7 +213,6 @@     auto shouldStopFunc = []() {
       return shouldStop.load();
     };
-    WaitableFlag* shouldPause = nullptr;
 
     Rand thisLoopSeedRand;
     while(true) {
@@ -227,13 +225,11 @@       MatchPairer::BotSpec botSpecW;
       if(matchPairer->getMatchup(botSpecB, botSpecW, logger)) {
         string seed = gameSeedBase + ":" + Global::uint64ToHexString(thisLoopSeedRand.nextUInt64());
-        std::function<void(const MatchPairer::BotSpec&, Search*)> afterInitialization = [&patternBonusTables](const MatchPairer::BotSpec& spec, Search* search) {
-          assert(spec.botIdx < patternBonusTables.size());
-          search->setCopyOfExternalPatternBonusTable(patternBonusTables[spec.botIdx]);
+        std::function<void(const MatchPairer::BotSpec&, Search*)> afterInitialization = [](const MatchPairer::BotSpec& spec, Search* search) {
         };
         gameData = gameRunner->runGame(
           seed, botSpecB, botSpecW, NULL, NULL, logger,
-          shouldStopFunc, shouldPause, nullptr, afterInitialization, nullptr
+          shouldStopFunc, nullptr, afterInitialization, nullptr
         );
       }
 
@@ -306,7 +302,7 @@     }
   }
   NeuralNet::globalCleanup();
-  ScoreValue::freeTables();
+   
 
   if(sigReceived.load())
     logger.write("Exited cleanly after signal");
