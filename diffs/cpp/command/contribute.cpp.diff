--- cpp/command/contribute.cpp [lightvector:master]+++ cpp/command/contribute.cpp [hzyhhzy:Reversi2022]@@ -1,5 +1,4 @@ #include "../core/global.h"
-#include "../core/commandloop.h"
 #include "../core/config_parser.h"
 #include "../core/datetime.h"
 #include "../core/fileutils.h"
@@ -15,8 +14,6 @@ #include "../program/play.h"
 #include "../program/setup.h"
 #include "../program/selfplaymanager.h"
-#include "../tests/tinymodel.h"
-#include "../tests/tests.h"
 #include "../command/commandline.h"
 #include "../main.h"
 
@@ -67,8 +64,6 @@ static std::atomic<bool> shouldStopGracefullyPrinted(false);
 static std::atomic<bool> shouldStopPrinted(false);
 
-static std::mutex controlMutex;
-
 
 // Some OSes, like windows, don't have SIGPIPE
 #ifdef SIGPIPE
@@ -108,7 +103,6 @@   std::atomic<int64_t>& numMovesPlayed,
   std::unique_ptr<ostream>& outputEachMove, std::function<void()> flushOutputEachMove,
   const std::function<bool()>& shouldStopFunc,
-  const WaitableFlag* shouldPause,
   bool logGamesAsJson, bool alwaysIncludeOwnership
 ) {
   if(gameTask.task.isRatingGame) {
@@ -148,8 +142,6 @@     cerr << e.what() << endl;
     throw;
   }
-
-  ClockTimer timer;
 
   MatchPairer::BotSpec botSpecB;
   MatchPairer::BotSpec botSpecW;
@@ -207,10 +199,10 @@         flushOutputEachMove();
     }
 
-    if(logGamesAsJson and hist.encorePhase == 0) { // If anyone wants to support encorePhase > 0 note passForKo is a thing
+    if(logGamesAsJson ) { 
       int analysisPVLen = 15;
       const Player perspective = P_BLACK;
-      bool preventEncore = true;
+      static constexpr int ownershipMinVisits = 3;
 
       // output format is a mix between an analysis query and response
       json ret;
@@ -247,7 +239,7 @@ 
       // Usual analysis response fields
       ret["turnNumber"] = hist.moveHistory.size();
-      search->getAnalysisJson(perspective,analysisPVLen,preventEncore,true,alwaysIncludeOwnership,false,false,false,false,ret);
+      search->getAnalysisJson(perspective,analysisPVLen,ownershipMinVisits,true,alwaysIncludeOwnership,false,false,false,false,ret);
       std::cout << ret.dump() + "\n" << std::flush; // no endl due to race conditions
     }
 
@@ -261,10 +253,10 @@   };
   FinishedGameData* gameData = gameRunner->runGame(
     seed, botSpecB, botSpecW, forkData, posSample,
-    logger, shouldStopFunc, shouldPause, nullptr, afterInitialization, onEachMove
+    logger, shouldStopFunc, nullptr, afterInitialization, onEachMove
   );
 
-  if(gameData != NULL && !shouldStopFunc()) {
+  if(gameData != NULL) {
     string sgfOutputDir;
     if(gameTask.task.isRatingGame)
       sgfOutputDir = sgfsDir + "/" + gameTask.task.taskGroup;
@@ -292,60 +284,53 @@         flushOutputEachMove();
     }
 
-    //If game is somehow extremely old due to a long pause, discard it
-    double gameTimeTaken = timer.getSeconds();
-    if(gameTimeTaken > 86400 * 4) {
-      logger.write("Skipping uploading stale game");
+    static constexpr bool retryOnFailure = true;
+    if(gameTask.task.doWriteTrainingData) {
+      //Pre-upload, verify that the GPU is okay.
+      Tests::runCanaryTests(nnEvalBlack, NNInputs::SYMMETRY_NOTSPECIFIED, false);
+      gameTask.blackManager->withDataWriters(
+        nnEvalBlack,
+        [gameData,&gameTask,gameIdx,&sgfFile,&connection,&logger,&shouldStopFunc](TrainingDataWriter* tdataWriter, TrainingDataWriter* vdataWriter, std::ofstream* sgfOut) {
+          (void)vdataWriter;
+          (void)sgfOut;
+          assert(tdataWriter->isEmpty());
+          tdataWriter->writeGame(*gameData);
+          string resultingFilename;
+          int64_t numDataRows = tdataWriter->numRowsInBuffer();
+          bool producedFile = tdataWriter->flushIfNonempty(resultingFilename);
+          //It's possible we'll have zero data if the game started in a nearly finished position and cheap search never
+          //gave us a real turn of search, in which case just ignore that game.
+          if(producedFile) {
+            bool suc = false;
+            try {
+              suc = connection->uploadTrainingGameAndData(gameTask.task,gameData,sgfFile,resultingFilename,numDataRows,retryOnFailure,shouldStopFunc);
+            }
+            catch(StringError& e) {
+              logger.write(string("Giving up uploading training game and data due to error:\n") + e.what());
+              suc = false;
+            }
+            if(suc)
+              logger.write(
+                "Finished game " + Global::int64ToString(gameIdx)  + " (training), uploaded sgf " + sgfFile + " and training data " + resultingFilename
+                + " (" + Global::int64ToString(numDataRows) + " rows)"
+              );
+          }
+          else {
+            logger.write("Finished game " + Global::int64ToString(gameIdx) + " (training), skipping uploading sgf " + sgfFile + " since it's an empty game");
+          }
+        });
     }
     else {
-      static constexpr bool retryOnFailure = true;
-      if(gameTask.task.doWriteTrainingData) {
-        //Pre-upload, verify that the GPU is okay.
-        Tests::runCanaryTests(nnEvalBlack, NNInputs::SYMMETRY_NOTSPECIFIED, false);
-        gameTask.blackManager->withDataWriters(
-          nnEvalBlack,
-          [gameData,&gameTask,gameIdx,&sgfFile,&connection,&logger,&shouldStopFunc](TrainingDataWriter* tdataWriter, TrainingDataWriter* vdataWriter, std::ofstream* sgfOut) {
-            (void)vdataWriter;
-            (void)sgfOut;
-            assert(tdataWriter->isEmpty());
-            tdataWriter->writeGame(*gameData);
-            string resultingFilename;
-            int64_t numDataRows = tdataWriter->numRowsInBuffer();
-            bool producedFile = tdataWriter->flushIfNonempty(resultingFilename);
-            //It's possible we'll have zero data if the game started in a nearly finished position and cheap search never
-            //gave us a real turn of search, in which case just ignore that game.
-            if(producedFile) {
-              bool suc = false;
-              try {
-                suc = connection->uploadTrainingGameAndData(gameTask.task,gameData,sgfFile,resultingFilename,numDataRows,retryOnFailure,shouldStopFunc);
-              }
-              catch(StringError& e) {
-                logger.write(string("Giving up uploading training game and data due to error:\n") + e.what());
-                suc = false;
-              }
-              if(suc)
-                logger.write(
-                  "Finished game " + Global::int64ToString(gameIdx)  + " (training), uploaded sgf " + sgfFile + " and training data " + resultingFilename
-                  + " (" + Global::int64ToString(numDataRows) + " rows)"
-                );
-            }
-            else {
-              logger.write("Finished game " + Global::int64ToString(gameIdx) + " (training), skipping uploading sgf " + sgfFile + " since it's an empty game");
-            }
-          });
-      }
-      else {
-        bool suc = false;
-        try {
-          suc = connection->uploadRatingGame(gameTask.task,gameData,sgfFile,retryOnFailure,shouldStopFunc);
-        }
-        catch(StringError& e) {
-          logger.write(string("Giving up uploading rating game due to error:\n") + e.what());
-          suc = false;
-        }
-        if(suc)
-          logger.write("Finished game " + Global::int64ToString(gameIdx) + " (rating), uploaded sgf " + sgfFile);
-      }
+      bool suc = false;
+      try {
+        suc = connection->uploadRatingGame(gameTask.task,gameData,sgfFile,retryOnFailure,shouldStopFunc);
+      }
+      catch(StringError& e) {
+        logger.write(string("Giving up uploading rating game due to error:\n") + e.what());
+        suc = false;
+      }
+      if(suc)
+        logger.write("Finished game " + Global::int64ToString(gameIdx) + " (rating), uploaded sgf " + sgfFile);
     }
   }
   else {
@@ -359,7 +344,7 @@ 
 int MainCmds::contribute(const vector<string>& args) {
   Board::initHash();
-  ScoreValue::initTables();
+   
   Rand seedRand;
 
   string baseDir;
@@ -473,12 +458,8 @@     }
   }
 
-  const bool logToStdoutDefault = true;
-  const bool logToStderrDefault = false;
-  const bool logTime = true;
-  // Explicitly avoid logging config contents, this contains the user's password.
-  const bool logConfigContents = false;
-  Logger logger(userCfg, logToStdoutDefault, logToStderrDefault, logTime, logConfigContents);
+  Logger logger;
+  logger.setLogToStdout(true);
 
   logger.write("Distributed Self Play Engine starting...");
 
@@ -630,34 +611,26 @@ #endif
   }
 
-  WaitableFlag* shouldPause = new WaitableFlag();
-
   //Set up signal handlers
   if(!std::atomic_is_lock_free(&shouldStop))
     throw StringError("shouldStop is not lock free, signal-quitting mechanism for terminating matches will NOT work!");
   std::signal(SIGINT, signalHandler);
   std::signal(SIGTERM, signalHandler);
 
-  auto shouldStopFunc = [&logger,&shouldPause]() {
+  auto shouldStopFunc = [&logger]() {
     if(shouldStop.load()) {
-      if(!shouldStopPrinted.exchange(true)) {
-        //At the point where we just want to stop ASAP, we never want to pause again.
-        shouldPause->setPermanently(false);
-        logger.write("Signal to stop (e.g. forcequit or ctrl-c) detected, interrupting current games.");
-      }
+      if(!shouldStopPrinted.exchange(true))
+        logger.write("Signal to stop (e.g. ctrl-c) detected, interrupting current games.");
       return true;
     }
     return false;
   };
-  auto shouldStopGracefullyFunc = [&logger,&shouldStopFunc,&shouldPause]() {
+  auto shouldStopGracefullyFunc = [&logger,&shouldStopFunc]() {
     if(shouldStopFunc())
       return true;
     if(shouldStopGracefully.load()) {
-      if(!shouldStopGracefullyPrinted.exchange(true)) {
-        logger.write("Signal to stop (e.g. quit or ctrl-c) detected, KataGo will shut down once all current games are finished. This may take quite a long time. Use forcequit or repeat ctrl-c again to stop without finishing current games.");
-        if(shouldPause->get())
-          logger.write("Also, KataGo is currently paused. In order to finish current games to shutdown, please resume.");
-      }
+      if(!shouldStopGracefullyPrinted.exchange(true))
+        logger.write("Signal to stop (e.g. ctrl-c) detected, KataGo will shut down once all current games are finished. This may take quite a long time. Repeat a second time to stop without finishing current games.");
       return true;
     }
     return false;
@@ -697,62 +670,11 @@   std::atomic<int64_t> numRatingGamesActive(0);
   std::atomic<int64_t> numMovesPlayed(0);
 
-  auto allocateGameTask = [&numRatingGamesActive](
-    const Client::Task& task,
-    SelfplayManager* blackManager,
-    SelfplayManager* whiteManager,
-    int repIdx,
-    Rand& taskRand
-  ) {
-    NNEvaluator* nnEvalBlack = blackManager->acquireModel(task.modelBlack.name);
-    NNEvaluator* nnEvalWhite = whiteManager->acquireModel(task.modelWhite.name);
-
-    //Randomly swap black and white per each game in the rep
-    GameTask gameTask;
-    gameTask.task = task;
-    gameTask.repIdx = repIdx;
-
-    if(taskRand.nextBool(0.5)) {
-      gameTask.blackManager = blackManager;
-      gameTask.whiteManager = whiteManager;
-      gameTask.nnEvalBlack = nnEvalBlack;
-      gameTask.nnEvalWhite = nnEvalWhite;
-    }
-    else {
-      //Swap everything
-      gameTask.blackManager = whiteManager;
-      gameTask.whiteManager = blackManager;
-      gameTask.nnEvalBlack = nnEvalWhite;
-      gameTask.nnEvalWhite = nnEvalBlack;
-      //Also swap the model within the task, which is used for data writing
-      gameTask.task.modelBlack = task.modelWhite;
-      gameTask.task.modelWhite = task.modelBlack;
-    }
-
-    if(task.isRatingGame)
-      numRatingGamesActive.fetch_add(1,std::memory_order_acq_rel);
-    return gameTask;
-  };
-
-  //Should be called any time we finish with game task (i.e. we're done with the game task)
-  auto freeGameTask = [&numRatingGamesActive](GameTask& gameTask) {
-    gameTask.blackManager->release(gameTask.nnEvalBlack);
-    gameTask.whiteManager->release(gameTask.nnEvalWhite);
-    gameTask.blackManager->clearUnusedModelCaches();
-    if(gameTask.whiteManager != gameTask.blackManager)
-      gameTask.whiteManager->clearUnusedModelCaches();
-
-    if(gameTask.task.isRatingGame)
-      numRatingGamesActive.fetch_add(-1,std::memory_order_acq_rel);
-  };
-
   auto runGameLoop = [
     &logger,forkData,&gameSeedBase,&gameTaskQueue,&numGamesStarted,&sgfsDir,&connection,
     &numRatingGamesActive,&numMovesPlayed,&watchOngoingGameInFile,&watchOngoingGameInFileName,
     &shouldStopFunc,&shouldStopGracefullyFunc,
-    &shouldPause,
-    &logGamesAsJson, &alwaysIncludeOwnership,
-    &freeGameTask
+    &logGamesAsJson, &alwaysIncludeOwnership
   ] (
     int gameLoopThreadIdx
   ) {
@@ -780,16 +702,22 @@       bool success = gameTaskQueue.waitPop(gameTask);
       if(!success)
         break;
-      shouldPause->waitUntilFalse();
       if(!shouldStopGracefullyFunc()) {
         string seed = gameSeedBase + ":" + Global::uint64ToHexString(thisLoopSeedRand.nextUInt64());
         int64_t gameIdx = numGamesStarted.fetch_add(1,std::memory_order_acq_rel);
         runAndUploadSingleGame(
           connection,gameTask,gameIdx,logger,seed,forkData,sgfsDir,thisLoopSeedRand,numMovesPlayed,outputEachMove,flushOutputEachMove,
-          shouldStopFunc,shouldPause,logGamesAsJson,alwaysIncludeOwnership
+          shouldStopFunc,logGamesAsJson,alwaysIncludeOwnership
         );
       }
-      freeGameTask(gameTask);
+      gameTask.blackManager->release(gameTask.nnEvalBlack);
+      gameTask.whiteManager->release(gameTask.nnEvalWhite);
+      gameTask.blackManager->clearUnusedModelCaches();
+      if(gameTask.whiteManager != gameTask.blackManager)
+        gameTask.whiteManager->clearUnusedModelCaches();
+
+      if(gameTask.task.isRatingGame)
+        numRatingGamesActive.fetch_add(-1,std::memory_order_acq_rel);
     }
   };
   auto runGameLoopProtected = [&logger,&runGameLoop](int gameLoopThreadIdx) {
@@ -953,10 +881,8 @@     std::this_thread::sleep_for(std::chrono::duration<double>(30));
     Rand preDownloadLoopRand;
     while(true) {
-      shouldPause->waitUntilFalse();
       if(shouldStopGracefullyFunc())
         return;
-
       logger.write("Maybe predownloading model...");
       connection->maybeDownloadNewestModel(modelsDir,shouldStopGracefullyFunc);
       //20 to 25 minutes
@@ -964,7 +890,6 @@       constexpr double stopPollFrequency = 5.0;
       while(sleepTimeTotal > 0.0) {
         double sleepTime = std::min(sleepTimeTotal, stopPollFrequency);
-        shouldPause->waitUntilFalse();
         if(shouldStopGracefullyFunc())
           return;
         std::this_thread::sleep_for(std::chrono::duration<double>(sleepTime));
@@ -992,8 +917,6 @@       if(shouldStopGracefullyFunc())
         break;
       std::this_thread::sleep_for(std::chrono::duration<double>(taskRand.nextDouble(taskLoopSleepTime,taskLoopSleepTime*2)));
-      shouldPause->waitUntilFalse();
-
       PriorityLock taskLock(taskLoopMutex);
       taskLock.lockLowPriority();
 
@@ -1062,7 +985,6 @@         ) {
           //Drop the lock while we download, so that other task loops can proceed
           taskLock.unlock();
-
           bool suc1;
           bool suc2;
           try {
@@ -1143,15 +1065,37 @@       LoadModel::deleteModelsOlderThan(modelsDir,logger,modelFileAgeLimit);
 
       for(int rep = 0; rep < taskRepFactor; rep++) {
-        //Game loop threads are responsible for releasing when done, unless
-        //we fail to push it into the queue.
-        GameTask gameTask = allocateGameTask(task,blackManager,whiteManager,rep,taskRand);
+        //Game loop threads are responsible for releasing when done.
+        NNEvaluator* nnEvalBlack = blackManager->acquireModel(task.modelBlack.name);
+        NNEvaluator* nnEvalWhite = whiteManager->acquireModel(task.modelWhite.name);
+
+        //Randomly swap black and white per each game in the rep
+        GameTask gameTask;
+        gameTask.task = task;
+        gameTask.repIdx = rep;
+
+        if(taskRand.nextBool(0.5)) {
+          gameTask.blackManager = blackManager;
+          gameTask.whiteManager = whiteManager;
+          gameTask.nnEvalBlack = nnEvalBlack;
+          gameTask.nnEvalWhite = nnEvalWhite;
+        }
+        else {
+          //Swap everything
+          gameTask.blackManager = whiteManager;
+          gameTask.whiteManager = blackManager;
+          gameTask.nnEvalBlack = nnEvalWhite;
+          gameTask.nnEvalWhite = nnEvalBlack;
+          //Also swap the model within the task, which is used for data writing
+          gameTask.task.modelBlack = task.modelWhite;
+          gameTask.task.modelWhite = task.modelBlack;
+        }
+
+        if(task.isRatingGame)
+          numRatingGamesActive.fetch_add(1,std::memory_order_acq_rel);
         suc = gameTaskQueue.waitPush(gameTask);
-        //Stop loop exited and we closed the queue in prep for a shutdown.
-        if(!suc) {
-          freeGameTask(gameTask);
-          break;
-        }
+        (void)suc;
+        assert(suc);
         maybePrintPerformanceUnsynchronized();
       }
 
@@ -1160,123 +1104,6 @@   };
   auto taskLoopProtected = [&logger,&taskLoop]() {
     Logger::logThreadUncaught("task loop", &logger, taskLoop);
-  };
-
-  //Loop whose purpose is to query shouldStopGracefullyFunc() so that
-  //the user more readily gets a log message when ctrl-c is received, and to quit as soon as
-  //a stop is detected trigger everything else to quit.
-  auto stopGracefullyLoop = [&]() {
-    while(true) {
-      if(shouldStopGracefullyFunc())
-        break;
-      std::this_thread::sleep_for(std::chrono::duration<double>(2.0));
-    }
-  };
-  //This one likewise watches the stricter shouldStop after we should stop gracefully.
-  auto stopLoop = [&]() {
-    while(true) {
-      if(shouldStopFunc())
-        break;
-      std::this_thread::sleep_for(std::chrono::duration<double>(2.0));
-    }
-  };
-
-  auto controlLoop = [&]() {
-    string line;
-    // When we interact with logger or other resources, we check under controlMutex whether we should stop.
-    // This mutex ensures that we can't race with someone trying to ensure that we're stopped
-    // and freeing resources like shouldPause or logger.
-
-    while(true) {
-      {
-        std::lock_guard<std::mutex> lock(controlMutex);
-        if(shouldStop.load())
-          break;
-        if(shouldStopGracefully.load()) {
-          if(shouldPause->get()) {
-            logger.write("--------");
-            logger.write("Currently in the process of quitting after current games are done, but paused.");
-            logger.write("Type 'resume' and hit enter to resume contribute and CPU and GPU usage.");
-            logger.write("Type 'forcequit' and hit enter to begin shutdown and quit more quickly, but lose all unfinished game data.");
-            logger.write("--------");
-          }
-          else {
-            logger.write("--------");
-            logger.write("Currently in the process of quitting after current games are done.");
-            logger.write("Type 'pause' and hit enter to pause contribute and CPU and GPU usage.");
-            logger.write("Type 'forcequit' and hit enter to begin shutdown and quit more quickly, but lose all unfinished game data.");
-            logger.write("--------");
-          }
-        }
-        else {
-          if(shouldPause->get()) {
-            logger.write("--------");
-            logger.write("Currently pausing or paused.");
-            logger.write("Type 'resume' and hit enter to resume contribute and CPU and GPU usage.");
-            logger.write("Type 'quit' and hit enter to begin shutdown, quitting after all current games are done (may take a long while, also need to resume first).");
-            logger.write("Type 'forcequit' and hit enter to shutdown and quit more quickly, but lose all unfinished game data.");
-            logger.write("--------");
-          }
-          else {
-            logger.write("--------");
-            logger.write("Type 'pause' and hit enter to pause contribute and CPU and GPU usage.");
-            logger.write("Type 'quit' and hit enter to begin shutdown, quitting after all current games are done (may take a long while).");
-            logger.write("Type 'forcequit' and hit enter to shutdown and quit more quickly, but lose all unfinished game data.");
-            logger.write("--------");
-          }
-        }
-      }
-
-      getline(cin,line);
-      if(!cin) {
-        std::lock_guard<std::mutex> lock(controlMutex);
-        if(shouldStop.load())
-          break;
-        logger.write("Stdin closed, no longer listening for commands...");
-        break;
-      }
-
-      if(shouldStop.load())
-        break;
-      line = CommandLoop::processSingleCommandLine(line);
-      string lowerline = Global::toLower(line);
-
-      std::lock_guard<std::mutex> lock(controlMutex);
-      if(shouldStop.load())
-        break;
-
-      if(lowerline == "pause") {
-        shouldPause->set(true);
-        if(shouldStopGracefully.load()) {
-          logger.write("Pausing contribute. (Note: this may take a minute)");
-          logger.write("(Note: KataGo is currently set to stop after current games, but this cannot happen without resuming)");
-        }
-        else
-          logger.write("Pausing contribute (note: this may take a minute).");
-      }
-      else if(lowerline == "resume") {
-        shouldPause->set(false);
-        if(shouldStopGracefully.load())
-          logger.write("Resuming contribute (stopping after current games)...");
-        else
-          logger.write("Resuming contribute...");
-      }
-      else if(lowerline == "quit") {
-        shouldStopGracefully.store(true);
-      }
-      else if(lowerline == "forcequit" || lowerline == "force_quit") {
-        shouldStop.store(true);
-        shouldStopGracefully.store(true);
-        shouldPause->setPermanently(false);
-      }
-      else {
-        logger.write("Warning: unknown command: " + string(line));
-      }
-    }
-  };
-
-  auto controlLoopProtected = [&logger, &controlLoop]() {
-    Logger::logThreadUncaught("control loop", &logger, controlLoop);
   };
 
   int numTaskLoopThreads = 4;
@@ -1284,34 +1111,18 @@   for(int i = 0; i<numTaskLoopThreads; i++) {
     taskLoopThreads.push_back(std::thread(taskLoopProtected));
   }
-
-  //Allocate thread using new to make sure its memory lasts beyond main(), and just let it leak as we exit.
-  new std::thread(controlLoopProtected);
-
-  //Start loop and wait for it to quit. When it quits, we know we need to stop everything else,
-  //possibly gracefully, possibly immediately.
-  std::thread stopGracefullyThread(stopGracefullyLoop);
-  stopGracefullyThread.join();
-
-  //Start second loop to be responsive to stop immediately indications, while we have stuff exit
-  std::thread stopThread(stopLoop);
-
+  //Wait for all task loop threads to stop
+  for(int i = 0; i<taskLoopThreads.size(); i++)
+    taskLoopThreads[i].join();
   maybePrintPerformanceUnsynchronized();
-  if(shouldPause->get())
-    logger.write("Beginning shutdown (paused)");
-  else
-    logger.write("Beginning shutdown");
+
+  logger.write("Beginning shutdown");
 
   //This should trigger game threads to quit
   gameTaskQueue.setReadOnly();
 
-  //Make sure we have a true in here just in case
+  //Make sure we have a true in here
   shouldStopGracefully.store(true);
-
-  //Wait for all task loop threads to stop
-  //Don't join the control loop, that one will potentially just keep waiting for stdin as we exit out.
-  for(int i = 0; i<taskLoopThreads.size(); i++)
-    taskLoopThreads[i].join();
 
   //Wait for download thread to stop
   preDownloadThread.join();
@@ -1320,16 +1131,8 @@   for(int i = 0; i<gameThreads.size(); i++)
     gameThreads[i].join();
 
-  //Make sure we have a true in here. Set it under the control mutex. This guarantees that we can't race with the control loop.
-  //By the time we exit the block, the control loop will no longer be touching any resources, and can only wait on cin or exit.
-  {
-    std::lock_guard<std::mutex> lock(controlMutex);
-    shouldStop.store(true);
-  }
-  //This should make sure stuff stops pausing
-  shouldPause->setPermanently(false);
-
-  stopThread.join();
+  //Make sure we have a true in here
+  shouldStop.store(true);
 
   //At this point, nothing else except possibly data write loops are running, within the selfplay manager.
   delete selfplayManager;
@@ -1341,10 +1144,8 @@   //Delete and clean up everything else
   NeuralNet::globalCleanup();
   delete forkData;
-  ScoreValue::freeTables();
+   
   delete userCfg;
-
-  delete shouldPause;
 
   if(sigReceived.load())
     logger.write("Exited cleanly after signal");
