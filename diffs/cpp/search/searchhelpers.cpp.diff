--- cpp/search/searchhelpers.cpp [lightvector:master]+++ cpp/search/searchhelpers.cpp [hzyhhzy:Reversi2022]@@ -2,7 +2,6 @@ 
 #include "../core/fancymath.h"
 #include "../search/searchnode.h"
-#include "../search/patternbonustable.h"
 
 //------------------------
 #include "../core/using.h"
@@ -216,29 +215,19 @@   double scoreMean = scoreMeanAvg;
   double scoreMeanSq = scoreMeanSqAvg;
   double scoreStdev = ScoreValue::getScoreStdev(scoreMean, scoreMeanSq);
-  double staticScoreValue = ScoreValue::expectedWhiteScoreValue(scoreMean,scoreStdev,0.0,2.0,rootBoard);
-  double dynamicScoreValue = ScoreValue::expectedWhiteScoreValue(scoreMean,scoreStdev,recentScoreCenter,searchParams.dynamicScoreCenterScale,rootBoard);
-  return staticScoreValue * searchParams.staticScoreUtilityFactor + dynamicScoreValue * searchParams.dynamicScoreUtilityFactor;
+  double dynamicScoreValue = scoreMean/(scoreStdev+1);
+
+  return scoreMean * searchParams.staticScoreUtilityFactor + dynamicScoreValue * searchParams.dynamicScoreUtilityFactor;
 }
 
 double Search::getScoreUtilityDiff(double scoreMeanAvg, double scoreMeanSqAvg, double delta) const {
-  double scoreMean = scoreMeanAvg;
-  double scoreMeanSq = scoreMeanSqAvg;
-  double scoreStdev = ScoreValue::getScoreStdev(scoreMean, scoreMeanSq);
-  double staticScoreValueDiff =
-    ScoreValue::expectedWhiteScoreValue(scoreMean + delta,scoreStdev,0.0,2.0,rootBoard)
-    -ScoreValue::expectedWhiteScoreValue(scoreMean,scoreStdev,0.0,2.0,rootBoard);
-  double dynamicScoreValueDiff =
-    ScoreValue::expectedWhiteScoreValue(scoreMean + delta,scoreStdev,recentScoreCenter,searchParams.dynamicScoreCenterScale,rootBoard)
-    -ScoreValue::expectedWhiteScoreValue(scoreMean,scoreStdev,recentScoreCenter,searchParams.dynamicScoreCenterScale,rootBoard);
-  return staticScoreValueDiff * searchParams.staticScoreUtilityFactor + dynamicScoreValueDiff * searchParams.dynamicScoreUtilityFactor;
+  return getScoreUtility(scoreMeanAvg+delta, scoreMeanSqAvg) - getScoreUtility(scoreMeanAvg, scoreMeanSqAvg);
 }
 
 //Ignores scoreMeanSq's effect on the utility, since that's complicated
 double Search::getApproxScoreUtilityDerivative(double scoreMean) const {
-  double staticScoreValueDerivative = ScoreValue::whiteDScoreValueDScoreSmoothNoDrawAdjust(scoreMean,0.0,2.0,rootBoard);
-  double dynamicScoreValueDerivative = ScoreValue::whiteDScoreValueDScoreSmoothNoDrawAdjust(scoreMean,recentScoreCenter,searchParams.dynamicScoreCenterScale,rootBoard);
-  return staticScoreValueDerivative * searchParams.staticScoreUtilityFactor + dynamicScoreValueDerivative * searchParams.dynamicScoreUtilityFactor;
+  (void)scoreMean;
+ return searchParams.staticScoreUtilityFactor;
 }
 
 
@@ -248,230 +237,6 @@ }
 
 
-bool Search::isAllowedRootMove(Loc moveLoc) const {
-  assert(moveLoc == Board::PASS_LOC || rootBoard.isOnBoard(moveLoc));
-
-  //A bad situation that can happen that unnecessarily prolongs training games is where one player
-  //repeatedly passes and the other side repeatedly fills the opponent's space and/or suicides over and over.
-  //To mitigate some of this and save computation, we make it so that at the root, if the last four moves by the opponent
-  //were passes, we will never play a move in either player's pass-alive area. In theory this could prune
-  //a good move in situations like https://senseis.xmp.net/?1EyeFlaw, but this should be extraordinarly rare,
-  if(searchParams.rootPruneUselessMoves &&
-     rootHistory.moveHistory.size() > 0 &&
-     moveLoc != Board::PASS_LOC
-  ) {
-    size_t lastIdx = rootHistory.moveHistory.size()-1;
-    Player opp = getOpp(rootPla);
-    if(lastIdx >= 6 &&
-       rootHistory.moveHistory[lastIdx-0].loc == Board::PASS_LOC &&
-       rootHistory.moveHistory[lastIdx-2].loc == Board::PASS_LOC &&
-       rootHistory.moveHistory[lastIdx-4].loc == Board::PASS_LOC &&
-       rootHistory.moveHistory[lastIdx-6].loc == Board::PASS_LOC &&
-       rootHistory.moveHistory[lastIdx-0].pla == opp &&
-       rootHistory.moveHistory[lastIdx-2].pla == opp &&
-       rootHistory.moveHistory[lastIdx-4].pla == opp &&
-       rootHistory.moveHistory[lastIdx-6].pla == opp &&
-       (rootSafeArea[moveLoc] == opp || rootSafeArea[moveLoc] == rootPla))
-      return false;
-  }
-
-  if(searchParams.rootSymmetryPruning && moveLoc != Board::PASS_LOC && rootSymDupLoc[moveLoc]) {
-    return false;
-  }
-
-  return true;
-}
-
-double Search::getPatternBonus(Hash128 patternBonusHash, Player prevMovePla) const {
-  if(patternBonusTable == NULL || prevMovePla != plaThatSearchIsFor)
-    return 0;
-  return patternBonusTable->get(patternBonusHash).utilityBonus;
-}
-
-
-double Search::getEndingWhiteScoreBonus(const SearchNode& parent, Loc moveLoc) const {
-  if(&parent != rootNode || moveLoc == Board::NULL_LOC)
-    return 0.0;
-
-  const NNOutput* nnOutput = parent.getNNOutput();
-  if(nnOutput == NULL || nnOutput->whiteOwnerMap == NULL)
-    return 0.0;
-
-  bool isAreaIsh = rootHistory.rules.scoringRule == Rules::SCORING_AREA
-    || (rootHistory.rules.scoringRule == Rules::SCORING_TERRITORY && rootHistory.encorePhase >= 2);
-  assert(nnOutput->nnXLen == nnXLen);
-  assert(nnOutput->nnYLen == nnYLen);
-  float* whiteOwnerMap = nnOutput->whiteOwnerMap;
-
-  const double extreme = 0.95;
-  const double tail = 0.05;
-
-  //Extra points from the perspective of the root player
-  double extraRootPoints = 0.0;
-  if(isAreaIsh) {
-    //Areaish scoring - in an effort to keep the game short and slightly discourage pointless territory filling at the end
-    //discourage any move that, except in case of ko, is either:
-    // * On a spot that the opponent almost surely owns
-    // * On a spot that the player almost surely owns and it is not adjacent to opponent stones and is not a connection of non-pass-alive groups.
-    //These conditions should still make it so that "cleanup" and dame-filling moves are not discouraged.
-    // * When playing button go, very slightly discourage passing - so that if there are an even number of dame, filling a dame is still favored over passing.
-    if(moveLoc != Board::PASS_LOC && rootBoard.ko_loc == Board::NULL_LOC) {
-      int pos = NNPos::locToPos(moveLoc,rootBoard.x_size,nnXLen,nnYLen);
-      double plaOwnership = rootPla == P_WHITE ? whiteOwnerMap[pos] : -whiteOwnerMap[pos];
-      if(plaOwnership <= -extreme)
-        extraRootPoints -= searchParams.rootEndingBonusPoints * ((-extreme - plaOwnership) / tail);
-      else if(plaOwnership >= extreme) {
-        if(!rootBoard.isAdjacentToPla(moveLoc,getOpp(rootPla)) &&
-           !rootBoard.isNonPassAliveSelfConnection(moveLoc,rootPla,rootSafeArea)) {
-          extraRootPoints -= searchParams.rootEndingBonusPoints * ((plaOwnership - extreme) / tail);
-        }
-      }
-    }
-    if(moveLoc == Board::PASS_LOC && rootHistory.hasButton) {
-      extraRootPoints -= searchParams.rootEndingBonusPoints * 0.5;
-    }
-  }
-  else {
-    //Territorish scoring - slightly encourage dame-filling by discouraging passing, so that the player will try to do everything
-    //non-point-losing first, like filling dame.
-    //Human japanese rules often "want" you to fill the dame so this is a cosmetic adjustment to encourage the neural
-    //net to learn to do so in the main phase rather than waiting until the encore.
-    //But cosmetically, it's also not great if we just encourage useless threat moves in the opponent's territory to prolong the game.
-    //So also discourage those moves except in cases of ko. Also similar to area scoring just to be symmetrical, discourage moves on spots
-    //that the player almost surely owns that are not adjacent to opponent stones and are not a connection of non-pass-alive groups.
-    if(moveLoc == Board::PASS_LOC)
-      extraRootPoints -= searchParams.rootEndingBonusPoints * (2.0/3.0);
-    else if(rootBoard.ko_loc == Board::NULL_LOC) {
-      int pos = NNPos::locToPos(moveLoc,rootBoard.x_size,nnXLen,nnYLen);
-      double plaOwnership = rootPla == P_WHITE ? whiteOwnerMap[pos] : -whiteOwnerMap[pos];
-      if(plaOwnership <= -extreme)
-        extraRootPoints -= searchParams.rootEndingBonusPoints * ((-extreme - plaOwnership) / tail);
-      else if(plaOwnership >= extreme) {
-        if(!rootBoard.isAdjacentToPla(moveLoc,getOpp(rootPla)) &&
-           !rootBoard.isNonPassAliveSelfConnection(moveLoc,rootPla,rootSafeArea)) {
-          extraRootPoints -= searchParams.rootEndingBonusPoints * ((plaOwnership - extreme) / tail);
-        }
-      }
-    }
-  }
-
-  if(rootPla == P_WHITE)
-    return extraRootPoints;
-  else
-    return -extraRootPoints;
-}
-
-//Hack to encourage well-behaved dame filling behavior under territory scoring
-bool Search::shouldSuppressPass(const SearchNode* n) const {
-  if(!searchParams.fillDameBeforePass || n == NULL || n != rootNode)
-    return false;
-  if(rootHistory.rules.scoringRule != Rules::SCORING_TERRITORY || rootHistory.encorePhase > 0)
-    return false;
-
-  const SearchNode& node = *n;
-  const NNOutput* nnOutput = node.getNNOutput();
-  if(nnOutput == NULL)
-    return false;
-  if(nnOutput->whiteOwnerMap == NULL)
-    return false;
-  assert(nnOutput->nnXLen == nnXLen);
-  assert(nnOutput->nnYLen == nnYLen);
-  const float* whiteOwnerMap = nnOutput->whiteOwnerMap;
-
-  //Find the pass move
-  const SearchNode* passNode = NULL;
-  int64_t passEdgeVisits = 0;
-
-  int childrenCapacity;
-  const SearchChildPointer* children = node.getChildren(childrenCapacity);
-  for(int i = 0; i<childrenCapacity; i++) {
-    const SearchNode* child = children[i].getIfAllocated();
-    if(child == NULL)
-      break;
-    Loc moveLoc = children[i].getMoveLocRelaxed();
-    if(moveLoc == Board::PASS_LOC) {
-      passNode = child;
-      passEdgeVisits = children[i].getEdgeVisits();
-      break;
-    }
-  }
-  if(passNode == NULL)
-    return false;
-
-  double passWeight;
-  double passUtility;
-  double passScoreMean;
-  double passLead;
-  {
-    int64_t passVisits = passNode->stats.visits.load(std::memory_order_acquire);
-    double scoreMeanAvg = passNode->stats.scoreMeanAvg.load(std::memory_order_acquire);
-    double leadAvg = passNode->stats.leadAvg.load(std::memory_order_acquire);
-    double utilityAvg = passNode->stats.utilityAvg.load(std::memory_order_acquire);
-    double childWeight = passNode->stats.getChildWeight(passEdgeVisits,passVisits);
-
-    if(passVisits <= 0 || childWeight <= 1e-10)
-      return false;
-    passWeight = childWeight;
-    passUtility = utilityAvg;
-    passScoreMean = scoreMeanAvg;
-    passLead = leadAvg;
-  }
-
-  const double extreme = 0.95;
-
-  //Suppress pass if we find a move that is not a spot that the opponent almost certainly owns
-  //or that is adjacent to a pla owned spot, and is not greatly worse than pass.
-  for(int i = 0; i<childrenCapacity; i++) {
-    const SearchNode* child = children[i].getIfAllocated();
-    if(child == NULL)
-      break;
-    Loc moveLoc = children[i].getMoveLocRelaxed();
-    if(moveLoc == Board::PASS_LOC)
-      continue;
-    int pos = NNPos::locToPos(moveLoc,rootBoard.x_size,nnXLen,nnYLen);
-    double plaOwnership = rootPla == P_WHITE ? whiteOwnerMap[pos] : -whiteOwnerMap[pos];
-    bool oppOwned = plaOwnership < -extreme;
-    bool adjToPlaOwned = false;
-    for(int j = 0; j<4; j++) {
-      Loc adj = moveLoc + rootBoard.adj_offsets[j];
-      int adjPos = NNPos::locToPos(adj,rootBoard.x_size,nnXLen,nnYLen);
-      double adjPlaOwnership = rootPla == P_WHITE ? whiteOwnerMap[adjPos] : -whiteOwnerMap[adjPos];
-      if(adjPlaOwnership > extreme) {
-        adjToPlaOwned = true;
-        break;
-      }
-    }
-    if(oppOwned && !adjToPlaOwned)
-      continue;
-
-    int64_t edgeVisits = children[i].getEdgeVisits();
-
-    double scoreMeanAvg = child->stats.scoreMeanAvg.load(std::memory_order_acquire);
-    double leadAvg = child->stats.leadAvg.load(std::memory_order_acquire);
-    double utilityAvg = child->stats.utilityAvg.load(std::memory_order_acquire);
-    double childWeight = child->stats.getChildWeight(edgeVisits);
-
-    //Too few visits - reject move
-    if((edgeVisits <= 500 && childWeight <= 2 * sqrt(passWeight)) || childWeight <= 1e-10)
-      continue;
-
-    double utility = utilityAvg;
-    double scoreMean = scoreMeanAvg;
-    double lead = leadAvg;
-
-    if(rootPla == P_WHITE
-       && utility > passUtility - 0.1
-       && scoreMean > passScoreMean - 0.5
-       && lead > passLead - 0.5)
-      return true;
-    if(rootPla == P_BLACK
-       && utility < passUtility + 0.1
-       && scoreMean < passScoreMean + 0.5
-       && lead < passLead + 0.5)
-      return true;
-  }
-  return false;
-}
 
 double Search::interpolateEarly(double halflife, double earlyValue, double value) const {
   double rawHalflives = (rootHistory.initialTurnNumber + rootHistory.moveHistory.size()) / halflife;
@@ -490,15 +255,15 @@ }
 
 double Search::getNormToTApproxForLCB(int64_t numVisits) const {
-  assert(numVisits >= MIN_VISITS_FOR_LCB);
-  uint64_t idx = (uint64_t)(numVisits - MIN_VISITS_FOR_LCB);
-  assert(normToTApproxTable.size() > 0);
+  int64_t idx = numVisits-MIN_VISITS_FOR_LCB;
+  assert(idx >= 0);
   if(idx >= normToTApproxTable.size())
     idx = normToTApproxTable.size()-1;
   return normToTApproxTable[idx];
 }
 
 void Search::getSelfUtilityLCBAndRadius(const SearchNode& parent, const SearchNode* child, int64_t edgeVisits, Loc moveLoc, double& lcbBuf, double& radiusBuf) const {
+  (void)moveLoc;
   int64_t childVisits = child->stats.visits.load(std::memory_order_acquire);
   double scoreMeanAvg = child->stats.scoreMeanAvg.load(std::memory_order_acquire);
   double scoreMeanSqAvg = child->stats.scoreMeanSqAvg.load(std::memory_order_acquire);
@@ -518,8 +283,7 @@     return;
 
   double utilityNoBonus = utilityAvg;
-  double endingScoreBonus = getEndingWhiteScoreBonus(parent,moveLoc);
-  double utilityDiff = getScoreUtilityDiff(scoreMeanAvg, scoreMeanSqAvg, endingScoreBonus);
+  double utilityDiff = getScoreUtilityDiff(scoreMeanAvg, scoreMeanSqAvg,0);
   double utilityWithBonus = utilityNoBonus + utilityDiff;
   double selfUtility = parent.nextPla == P_WHITE ? utilityWithBonus : -utilityWithBonus;
 
