--- cpp/search/searchmirror.cpp [lightvector:master]+++ cpp/search/searchmirror.cpp [hzyhhzy:Reversi2022]@@ -40,18 +40,10 @@       mirroringPla = getOpp(rootPla);
 
       double blackExtraPoints = 0.0;
-      int numHandicapStones = hist.computeNumHandicapStones();
-      if(hist.rules.scoringRule == Rules::SCORING_AREA) {
-        if(numHandicapStones > 0)
-          blackExtraPoints += numHandicapStones-1;
-        bool blackGetsLastMove = (board.x_size % 2 == 1 && board.y_size % 2 == 1) == (numHandicapStones == 0 || numHandicapStones % 2 == 1);
+        bool blackGetsLastMove = (board.x_size % 2 == 1 && board.y_size % 2 == 1) ;
         if(blackGetsLastMove)
           blackExtraPoints += 1;
-      }
-      if(numHandicapStones > 0 && hist.rules.whiteHandicapBonusRule == Rules::WHB_N)
-        blackExtraPoints -= numHandicapStones;
-      if(numHandicapStones > 0 && hist.rules.whiteHandicapBonusRule == Rules::WHB_N_MINUS_ONE)
-        blackExtraPoints -= numHandicapStones-1;
+      
       mirrorAdvantage = mirroringPla == P_BLACK ? blackExtraPoints - hist.rules.komi : hist.rules.komi - blackExtraPoints;
     }
 
@@ -131,15 +123,12 @@       Loc centerLoc = Location::getCenterLoc(xSize,ySize);
       if(centerLoc != Board::NULL_LOC) {
         if(rootBoard.colors[centerLoc] == getOpp(movePla)) {
-          if(thread->board.isAdjacentToChain(moveLoc,centerLoc))
-            weight = 0.05;
-          else {
             int distanceSq = Location::euclideanDistanceSquared(moveLoc,centerLoc,xSize);
             if(distanceSq <= 2)
               weight = 0.05;
             else if(distanceSq <= 4)
               weight = 0.03;
-          }
+          
         }
       }
     }
@@ -235,11 +224,6 @@   else if(movePla == rootPla && moveLoc != Board::PASS_LOC) {
     double proportionToDump = 0.0;
     if(isDifficult) {
-      if(thread->board.isAdjacentToChain(moveLoc,centerLoc)) {
-        childUtility += (parent.nextPla == P_WHITE ? 0.75 : -0.75) / (1.0 + thread->board.getNumLiberties(centerLoc))
-          / std::max(1.0,mirrorCenterSymmetryError) * std::max(0.3, 1.0 - 0.7 * parentUtility * parentUtility);
-        proportionToDump = 0.10 / thread->board.getNumLiberties(centerLoc);
-      }
       int distanceSq = Location::euclideanDistanceSquared(moveLoc,centerLoc,xSize);
       if(distanceSq <= 2)
         proportionToDump = std::max(proportionToDump, 0.010);
