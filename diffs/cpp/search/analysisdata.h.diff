--- cpp/search/analysisdata.h [lightvector:master]+++ cpp/search/analysisdata.h [hzyhhzy:Reversi2022]@@ -17,6 +17,7 @@   double resultUtility; //Utility from winloss result
   double scoreUtility; //Utility from score. Summing with resultUtility gives utility.
   double winLossValue; //From -1 to 1
+  double noResultValue; //From 0 to 1
   double policyPrior; //From 0 to 1
   double scoreMean; //In units of points
   double scoreStdev; //In units of points
@@ -32,7 +33,6 @@   int symmetry; //The symmetry applied to isSymmetryOf to get move, or 0.
   std::vector<Loc> pv;
   std::vector<int64_t> pvVisits;
-  std::vector<int64_t> pvEdgeVisits;
 
   const SearchNode* node; //ONLY valid so long as search is not cleared
 
@@ -47,11 +47,6 @@   bool pvContainsPass() const;
   void writePV(std::ostream& out, const Board& board) const;
   void writePVVisits(std::ostream& out) const;
-  void writePVEdgeVisits(std::ostream& out) const;
-  void writePVUpToPhaseEnd(std::ostream& out, const Board& initialBoard, const BoardHistory& initialHist, Player initialPla) const;
-  void writePVVisitsUpToPhaseEnd(std::ostream& out, const Board& initialBoard, const BoardHistory& initialHist, Player initialPla) const;
-  void writePVEdgeVisitsUpToPhaseEnd(std::ostream& out, const Board& initialBoard, const BoardHistory& initialHist, Player initialPla) const;
-  int getPVLenUpToPhaseEnd(const Board& initialBoard, const BoardHistory& initialHist, Player initialPla) const;
 };
 
 bool operator<(const AnalysisData& a0, const AnalysisData& a1);
