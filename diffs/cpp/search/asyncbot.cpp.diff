--- cpp/search/asyncbot.cpp [lightvector:master]+++ cpp/search/asyncbot.cpp [hzyhhzy:Reversi2022]@@ -24,10 +24,7 @@    controlMutex(),threadWaitingToSearch(),userWaitingForStop(),searchThread(),
    isRunning(false),isPondering(false),isKilled(false),shouldStopNow(false),
    queuedSearchId(0),queuedOnMove(),timeControls(),searchFactor(1.0),
-   analyzeCallbackPeriod(-1),
-   analyzeFirstCallbackAfter(-1),
-   analyzeCallback(),
-   searchBegunCallback()
+   analyzeCallbackPeriod(-1),analyzeCallback(),searchBegunCallback()
 {
   search = new Search(params,nnEval,l,randSeed);
   searchThread = std::thread(searchThreadLoop,this,l);
@@ -106,14 +103,6 @@   stopAndWait();
   search->setParamsNoClearing(params);
 }
-void AsyncBot::setExternalPatternBonusTable(std::unique_ptr<PatternBonusTable>&& table) {
-  stopAndWait();
-  search->setExternalPatternBonusTable(std::move(table));
-}
-void AsyncBot::setCopyOfExternalPatternBonusTable(const std::unique_ptr<PatternBonusTable>& table) {
-  stopAndWait();
-  search->setCopyOfExternalPatternBonusTable(table);
-}
 void AsyncBot::clearSearch() {
   stopAndWait();
   search->clearSearch();
@@ -122,10 +111,6 @@ bool AsyncBot::makeMove(Loc moveLoc, Player movePla) {
   stopAndWait();
   return search->makeMove(moveLoc,movePla);
-}
-bool AsyncBot::makeMove(Loc moveLoc, Player movePla, bool preventEncore) {
-  stopAndWait();
-  return search->makeMove(moveLoc,movePla,preventEncore);
 }
 
 bool AsyncBot::isLegalTolerant(Loc moveLoc, Player movePla) const {
@@ -144,7 +129,7 @@ }
 
 void AsyncBot::genMoveAsync(Player movePla, int searchId, const TimeControls& tc, double sf, const std::function<void(Loc,int)>& onMove, const std::function<void()>& onSearchBegun) {
-  std::unique_lock<std::mutex> lock(controlMutex);
+  unique_lock<std::mutex> lock(controlMutex);
   stopAndWaitAlreadyLocked(lock);
   assert(!isRunning);
   if(isKilled)
@@ -161,7 +146,6 @@   timeControls = tc;
   searchFactor = sf;
   analyzeCallbackPeriod = -1;
-  analyzeFirstCallbackAfter = -1;
   analyzeCallback = nullptr;
   searchBegunCallback = onSearchBegun;
   lock.unlock();
@@ -193,7 +177,7 @@ }
 
 void AsyncBot::ponder(double sf) {
-  std::unique_lock<std::mutex> lock(controlMutex);
+  unique_lock<std::mutex> lock(controlMutex);
   if(isRunning)
     return;
   if(isKilled)
@@ -207,20 +191,13 @@   timeControls = TimeControls(); //Blank time controls since opponent's clock is running, not ours, so no cap other than searchFactor
   searchFactor = sf;
   analyzeCallbackPeriod = -1;
-  analyzeFirstCallbackAfter = -1;
   analyzeCallback = nullptr;
   searchBegunCallback = nullptr;
   lock.unlock();
   threadWaitingToSearch.notify_all();
 }
-void AsyncBot::analyzeAsync(
-  Player movePla,
-  double sf,
-  double callbackPeriod,
-  double firstCallbackAfter,
-  const std::function<void(const Search* search)>& callback
-) {
-  std::unique_lock<std::mutex> lock(controlMutex);
+void AsyncBot::analyzeAsync(Player movePla, double sf, double callbackPeriod, const std::function<void(const Search* search)>& callback) {
+  unique_lock<std::mutex> lock(controlMutex);
   stopAndWaitAlreadyLocked(lock);
   assert(!isRunning);
   if(isKilled)
@@ -237,7 +214,6 @@   timeControls = TimeControls(); //Blank time controls since no clock is not running, we don't cap search time other than through searchFactor.
   searchFactor = sf;
   analyzeCallbackPeriod = callbackPeriod;
-  analyzeFirstCallbackAfter = firstCallbackAfter;
   analyzeCallback = callback;
   searchBegunCallback = nullptr;
   lock.unlock();
@@ -245,30 +221,18 @@ }
 
 void AsyncBot::genMoveAsyncAnalyze(
-  Player movePla,
-  int searchId,
-  const TimeControls& tc,
-  double sf,
-  const std::function<void(Loc,int)>& onMove,
-  double callbackPeriod,
-  double firstCallbackAfter,
-  const std::function<void(const Search* search)>& callback
+  Player movePla, int searchId, const TimeControls& tc, double sf, const std::function<void(Loc,int)>& onMove,
+  double callbackPeriod, const std::function<void(const Search* search)>& callback
 ) {
-  genMoveAsyncAnalyze(movePla, searchId, tc, sf, onMove, callbackPeriod, firstCallbackAfter, callback, nullptr);
+  genMoveAsyncAnalyze(movePla, searchId, tc, sf, onMove, callbackPeriod, callback, nullptr);
 }
 
 void AsyncBot::genMoveAsyncAnalyze(
-  Player movePla,
-  int searchId,
-  const TimeControls& tc,
-  double sf,
-  const std::function<void(Loc,int)>& onMove,
-  double callbackPeriod,
-  double firstCallbackAfter,
-  const std::function<void(const Search* search)>& callback,
+  Player movePla, int searchId, const TimeControls& tc, double sf, const std::function<void(Loc,int)>& onMove,
+  double callbackPeriod, const std::function<void(const Search* search)>& callback,
   const std::function<void()>& onSearchBegun
 ) {
-  std::unique_lock<std::mutex> lock(controlMutex);
+  unique_lock<std::mutex> lock(controlMutex);
   stopAndWaitAlreadyLocked(lock);
   assert(!isRunning);
   if(isKilled)
@@ -285,7 +249,6 @@   timeControls = tc;
   searchFactor = sf;
   analyzeCallbackPeriod = callbackPeriod;
-  analyzeFirstCallbackAfter = firstCallbackAfter;
   analyzeCallback = callback;
   searchBegunCallback = onSearchBegun;
   lock.unlock();
@@ -293,23 +256,15 @@ }
 
 Loc AsyncBot::genMoveSynchronousAnalyze(
-  Player movePla,
-  const TimeControls& tc,
-  double sf,
-  double callbackPeriod,
-  double firstCallbackAfter,
-  const std::function<void(const Search* search)>& callback
+  Player movePla, const TimeControls& tc, double sf,
+  double callbackPeriod, const std::function<void(const Search* search)>& callback
 ) {
-  return genMoveSynchronousAnalyze(movePla, tc, sf, callbackPeriod, firstCallbackAfter, callback, nullptr);
+  return genMoveSynchronousAnalyze(movePla, tc, sf, callbackPeriod, callback, nullptr);
 }
 
 Loc AsyncBot::genMoveSynchronousAnalyze(
-  Player movePla,
-  const TimeControls& tc,
-  double sf,
-  double callbackPeriod,
-  double firstCallbackAfter,
-  const std::function<void(const Search* search)>& callback,
+  Player movePla, const TimeControls& tc, double sf,
+  double callbackPeriod, const std::function<void(const Search* search)>& callback,
   const std::function<void()>& onSearchBegun
 ) {
   Loc moveLoc = Board::NULL_LOC;
@@ -318,7 +273,7 @@     (void)searchId; //avoid warning when asserts disabled
     moveLoc = loc;
   };
-  genMoveAsyncAnalyze(movePla,0,tc,sf,onMove,callbackPeriod,firstCallbackAfter,callback,onSearchBegun);
+  genMoveAsyncAnalyze(movePla,0,tc,sf,onMove,callbackPeriod,callback,onSearchBegun);
   waitForSearchToEnd();
   return moveLoc;
 }
@@ -339,24 +294,24 @@   waitForSearchToEnd();
 }
 
-void AsyncBot::stopAndWaitAlreadyLocked(std::unique_lock<std::mutex>& lock) {
+void AsyncBot::stopAndWaitAlreadyLocked(unique_lock<std::mutex>& lock) {
   shouldStopNow.store(true);
   waitForSearchToEndAlreadyLocked(lock);
 }
 
 void AsyncBot::waitForSearchToEnd() {
-  std::unique_lock<std::mutex> lock(controlMutex);
+  unique_lock<std::mutex> lock(controlMutex);
   while(isRunning)
     userWaitingForStop.wait(lock);
 }
 
-void AsyncBot::waitForSearchToEndAlreadyLocked(std::unique_lock<std::mutex>& lock) {
+void AsyncBot::waitForSearchToEndAlreadyLocked(unique_lock<std::mutex>& lock) {
   while(isRunning)
     userWaitingForStop.wait(lock);
 }
 
 void AsyncBot::internalSearchThreadLoop() {
-  std::unique_lock<std::mutex> lock(controlMutex);
+  unique_lock<std::mutex> lock(controlMutex);
   while(true) {
     while(!isRunning && !isKilled)
       threadWaitingToSearch.wait(lock);
@@ -367,10 +322,9 @@       break;
     }
 
-    const bool pondering = isPondering;
-    const TimeControls tc = timeControls;
+    bool pondering = isPondering;
+    TimeControls tc = timeControls;
     double callbackPeriod = analyzeCallbackPeriod;
-    double firstCallbackAfter = analyzeFirstCallbackAfter;
     //Make local copies just in case, to simplify thread reasoning for the member fields
     std::function<void(const Search*)> analyzeCallbackLocal = analyzeCallback;
     std::function<void()> searchBegunCallbackLocal = searchBegunCallback;
@@ -380,68 +334,46 @@     //For a long period, just don't do callbacks.
     if(callbackPeriod >= 10000000)
       callbackPeriod = -1;
-    if(firstCallbackAfter >= 10000000) {
-      firstCallbackAfter = -1;
-      callbackPeriod = -1;
-    }
-
-    //Handle search begun and analysis callback loops
-    const bool usingCallbackLoop = (firstCallbackAfter >= 0 || callbackPeriod >= 0) && analyzeCallbackLocal;
-
-    bool isSearchBegun = false;
-    condition_variable callbackLoopWaitingForSearchBegun;
-    std::function<void()> searchBegun = [this,usingCallbackLoop,&isSearchBegun,&searchBegunCallbackLocal,&callbackLoopWaitingForSearchBegun]() {
+
+    //Kick off analysis callback loop if desired
+    condition_variable callbackLoopWaiting;
+    atomic<bool> callbackLoopShouldStop(false);
+    atomic<bool> isSearchBegun(false);
+    std::function<void()> searchBegun = [&isSearchBegun,&searchBegunCallbackLocal]() {
+      isSearchBegun.store(true,std::memory_order_release);
       if(searchBegunCallbackLocal)
         searchBegunCallbackLocal();
-      if(usingCallbackLoop) {
-        std::lock_guard<std::mutex> callbackLock(controlMutex);
-        isSearchBegun = true;
-        callbackLoopWaitingForSearchBegun.notify_all();
-      }
     };
-
-    condition_variable callbackLoopWaiting;
-    atomic<bool> callbackLoopShouldStop(false);
-    auto callbackLoop = [this,&isSearchBegun,&callbackLoopWaitingForSearchBegun,callbackPeriod,firstCallbackAfter,&analyzeCallbackLocal,&callbackLoopWaiting,&callbackLoopShouldStop]() {
-      std::unique_lock<std::mutex> callbackLock(controlMutex);
-      while(!isSearchBegun) {
-        callbackLoopWaitingForSearchBegun.wait(callbackLock);
-        if(callbackLoopShouldStop.load())
-          return;
-      }
-
-      bool isFirstLoop = true;
+    auto callbackLoop = [this,callbackPeriod,&analyzeCallbackLocal,&callbackLoopWaiting,&callbackLoopShouldStop,&isSearchBegun]() {
+      unique_lock<std::mutex> callbackLock(controlMutex);
       while(true) {
-        double periodToWait = isFirstLoop ? firstCallbackAfter : callbackPeriod;
-        if(periodToWait < 0)
-          return;
-        isFirstLoop = false;
-
         callbackLoopWaiting.wait_for(
           callbackLock,
-          std::chrono::duration<double>(periodToWait),
+          std::chrono::duration<double>(callbackPeriod),
           [&callbackLoopShouldStop](){return callbackLoopShouldStop.load();}
         );
         if(callbackLoopShouldStop.load())
-          return;
+          break;
+        if(!isSearchBegun.load(std::memory_order_acquire))
+          continue;
         callbackLock.unlock();
         analyzeCallbackLocal(search);
         callbackLock.lock();
       }
+      callbackLock.unlock();
     };
 
     std::thread callbackLoopThread;
-    if(usingCallbackLoop) {
+    if(callbackPeriod >= 0 && analyzeCallbackLocal) {
       callbackLoopThread = std::thread(callbackLoop);
     }
 
     search->runWholeSearch(shouldStopNow,&searchBegun,pondering,tc,searchFactor);
     Loc moveLoc = search->getChosenMoveLoc();
 
-    if(usingCallbackLoop) {
+    if(callbackPeriod >= 0) {
       lock.lock();
       callbackLoopShouldStop.store(true);
-      callbackLoopWaitingForSearchBegun.notify_all();
       callbackLoopWaiting.notify_all();
       lock.unlock();
       callbackLoopThread.join();
