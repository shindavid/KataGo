--- cpp/dataio/sgf.cpp [lightvector:master]+++ cpp/dataio/sgf.cpp [hzyhhzy:Reversi2022]@@ -290,7 +290,7 @@     if(childDepth > maxChildDepth)
       maxChildDepth = childDepth;
   }
-  return maxChildDepth + (int64_t)nodes.size();
+  return maxChildDepth + nodes.size();
 }
 
 int64_t Sgf::nodeCount() const {
@@ -307,7 +307,7 @@     count += children[i]->branchCount();
   }
   if(children.size() > 1)
-    count += (int64_t)children.size()-1;
+    count += children.size()-1;
   return count;
 }
 
@@ -392,18 +392,6 @@   return komi;
 }
 
-int Sgf::getHandicapValue() const {
-  checkNonEmpty(nodes);
-  //Default, if SGF doesn't specify
-  if(!nodes[0]->hasProperty("HA"))
-    return 0;
-
-  int handicapValue = 0;
-  bool suc = Global::tryStringToInt(nodes[0]->getSingleProperty("HA"), handicapValue);
-  if(!suc)
-    propertyFail("Could not parse handicap value in sgf");
-  return handicapValue;
-}
 
 bool Sgf::hasRules() const {
   checkNonEmpty(nodes);
@@ -588,7 +576,6 @@   std::set<Hash128>& uniqueHashes,
   bool hashComments,
   bool hashParent,
-  bool flipIfPassOrWFirst,
   Rand* rand,
   vector<PositionSample>& samples
 ) const {
@@ -598,14 +585,13 @@     samples.push_back(sample);
   };
 
-  iterAllUniquePositions(uniqueHashes,hashComments,hashParent,flipIfPassOrWFirst,rand,f);
+  iterAllUniquePositions(uniqueHashes,hashComments,hashParent,rand,f);
 }
 
 void Sgf::iterAllUniquePositions(
   std::set<Hash128>& uniqueHashes,
   bool hashComments,
   bool hashParent,
-  bool flipIfPassOrWFirst,
   Rand* rand,
   std::function<void(PositionSample&,const BoardHistory&,const std::string&)> f
 ) const {
@@ -618,13 +604,11 @@   if(nextPla == C_EMPTY)
     nextPla = C_BLACK;
   Rules rules = Rules::getTrompTaylorish();
-  rules.koRule = Rules::KO_SITUATIONAL;
-  rules.multiStoneSuicideLegal = true;
-  BoardHistory hist(board,nextPla,rules,0);
+  BoardHistory hist(board,nextPla,rules);
 
   PositionSample sampleBuf;
   std::vector<std::pair<int64_t,int64_t>> variationTraceNodesBranch;
-  iterAllUniquePositionsHelper(board,hist,nextPla,rules,xSize,ySize,sampleBuf,0,uniqueHashes,hashComments,hashParent,flipIfPassOrWFirst,rand,variationTraceNodesBranch,f);
+  iterAllUniquePositionsHelper(board,hist,nextPla,rules,xSize,ySize,sampleBuf,0,uniqueHashes,hashComments,hashParent,rand,variationTraceNodesBranch,f);
 }
 
 void Sgf::iterAllUniquePositionsHelper(
@@ -635,7 +619,6 @@   std::set<Hash128>& uniqueHashes,
   bool hashComments,
   bool hashParent,
-  bool flipIfPassOrWFirst,
   Rand* rand,
   std::vector<std::pair<int64_t,int64_t>>& variationTraceNodesBranch,
   std::function<void(PositionSample&,const BoardHistory&,const std::string&)> f
@@ -660,7 +643,6 @@             netStonesAdded++;
           board.setStone(buf[j].loc, buf[j].pla);
         }
-        board.clearSimpleKoLoc();
         //Clear history any time placements happen, but make sure we track the initial turn number.
         initialTurnNumber += (int)hist.moveHistory.size();
 
@@ -670,9 +652,9 @@         if(netStonesAdded > 0)
           initialTurnNumber += (netStonesAdded+1)/2;
 
-        hist.clear(board,nextPla,rules,0);
+        hist.clear(board,nextPla,rules);
       }
-      samplePositionIfUniqueHelper(board,hist,nextPla,sampleBuf,initialTurnNumber,uniqueHashes,hashComments,hashParent,flipIfPassOrWFirst,comments,f);
+      samplePositionIfUniqueHelper(board,hist,nextPla,sampleBuf,initialTurnNumber,uniqueHashes,hashComments,hashParent,comments,f);
     }
 
     //Handle actual moves
@@ -697,7 +679,7 @@       if(hist.moveHistory.size() > 0x3FFFFFFF)
         throw StringError("too many moves in sgf");
       nextPla = getOpp(buf[j].pla);
-      samplePositionIfUniqueHelper(board,hist,nextPla,sampleBuf,initialTurnNumber,uniqueHashes,hashComments,hashParent,flipIfPassOrWFirst,comments,f);
+      samplePositionIfUniqueHelper(board,hist,nextPla,sampleBuf,initialTurnNumber,uniqueHashes,hashComments,hashParent,comments,f);
     }
   }
 
@@ -718,7 +700,7 @@     std::unique_ptr<BoardHistory> histCopy = std::make_unique<BoardHistory>(hist);
     variationTraceNodesBranch.push_back(std::make_pair((int64_t)nodes.size(),(int64_t)i));
     children[i]->iterAllUniquePositionsHelper(
-      *copy,*histCopy,nextPla,rules,xSize,ySize,sampleBuf,initialTurnNumber,uniqueHashes,hashComments,hashParent,flipIfPassOrWFirst,rand,variationTraceNodesBranch,f
+      *copy,*histCopy,nextPla,rules,xSize,ySize,sampleBuf,initialTurnNumber,uniqueHashes,hashComments,hashParent,rand,variationTraceNodesBranch,f
     );
     assert(variationTraceNodesBranch.size() > 0);
     variationTraceNodesBranch.erase(variationTraceNodesBranch.begin()+(variationTraceNodesBranch.size()-1));
@@ -732,7 +714,6 @@   std::set<Hash128>& uniqueHashes,
   bool hashComments,
   bool hashParent,
-  bool flipIfPassOrWFirst,
   const std::string& comments,
   std::function<void(PositionSample&,const BoardHistory&,const std::string&)> f
 ) const {
@@ -747,9 +728,6 @@   //Hash based on position, player, and simple ko
   Hash128 situationHash = board.pos_hash;
   situationHash ^= Board::ZOBRIST_PLAYER_HASH[nextPla];
-  assert(hist.encorePhase == 0);
-  if(board.ko_loc != Board::NULL_LOC)
-    situationHash ^= Board::ZOBRIST_KO_LOC_HASH[board.ko_loc];
 
   if(hashComments)
     situationHash.hash0 += Hash::simpleHash(comments.c_str());
@@ -759,8 +737,6 @@     if(hist.moveHistory.size() > 0) {
       const Board& prevBoard = hist.getRecentBoard(1);
       parentHash = prevBoard.pos_hash;
-      if(prevBoard.ko_loc != Board::NULL_LOC)
-        parentHash ^= Board::ZOBRIST_KO_LOC_HASH[prevBoard.ko_loc];
     }
     //Mix in a blended up hash of the previous board state to avoid zobrist cancellation, also swapping halves
     Hash128 mixed = Hash128(Hash::murmurMix(parentHash.hash1),Hash::splitMix64(parentHash.hash0));
@@ -801,10 +777,6 @@   sampleBuf.hintLoc = Board::NULL_LOC;
   sampleBuf.weight = 1.0;
 
-  if(flipIfPassOrWFirst) {
-    if(hist.hasBlackPassOrWhiteFirst())
-      sampleBuf = sampleBuf.getColorFlipped();
-  }
 
   f(sampleBuf,hist,comments);
 }
@@ -828,13 +800,13 @@ 
 set<Hash128> Sgf::readExcludes(const vector<string>& files) {
   set<Hash128> excludeHashes;
-  for(const string& file: files) {
-    string excludeHashesFile = Global::trim(file);
+  for(int i = 0; i<files.size(); i++) {
+    string excludeHashesFile = Global::trim(files[i]);
     if(excludeHashesFile.size() <= 0)
       continue;
     vector<string> hashes = FileUtils::readFileLines(excludeHashesFile,'\n');
-    for(const string& hashStr: hashes) {
-      string hash128 = Global::trim(Global::stripComments(hashStr));
+    for(int64_t j = 0; j < hashes.size(); j++) {
+      const string& hash128 = Global::trim(Global::stripComments(hashes[j]));
       if(hash128.length() <= 0)
         continue;
       if(hash128.length() != 32)
@@ -1391,11 +1363,11 @@     board.setStone(placements[i].loc,placements[i].pla);
   }
 
-  hist = BoardHistory(board,nextPla,initialRules,0);
+  hist = BoardHistory(board,nextPla,initialRules);
 }
 
 void CompactSgf::playMovesAssumeLegal(Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx) const {
-  if(turnIdx < 0 || turnIdx > (int64_t)moves.size())
+  if(turnIdx < 0 || turnIdx > moves.size())
     throw StringError(
       Global::strprintf(
         "Attempting to set up position from SGF for invalid turn idx %lld, valid values are %lld to %lld",
@@ -1404,13 +1376,13 @@     );
 
   for(int64_t i = 0; i<turnIdx; i++) {
-    hist.makeBoardMoveAssumeLegal(board,moves[i].loc,moves[i].pla,NULL);
+    hist.makeBoardMoveAssumeLegal(board,moves[i].loc,moves[i].pla);
     nextPla = getOpp(moves[i].pla);
   }
 }
 
-void CompactSgf::playMovesTolerant(Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx, bool preventEncore) const {
-  if(turnIdx < 0 || turnIdx > (int64_t)moves.size())
+void CompactSgf::playMovesTolerant(Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx) const {
+  if(turnIdx < 0 || turnIdx > moves.size())
     throw StringError(
       Global::strprintf(
         "Attempting to set up position from SGF for invalid turn idx %lld, valid values are %lld to %lld",
@@ -1419,7 +1391,7 @@     );
 
   for(int64_t i = 0; i<turnIdx; i++) {
-    bool suc = hist.makeBoardMoveTolerant(board,moves[i].loc,moves[i].pla,preventEncore);
+    bool suc = hist.makeBoardMoveTolerant(board,moves[i].loc,moves[i].pla);
     if(!suc)
       throw StringError("Illegal move in " + fileName + " turn " + Global::int64ToString(i) + " move " + Location::toString(moves[i].loc, board.x_size, board.y_size));
     nextPla = getOpp(moves[i].pla);
@@ -1431,28 +1403,33 @@   playMovesAssumeLegal(board, nextPla, hist, turnIdx);
 }
 
-void CompactSgf::setupBoardAndHistTolerant(const Rules& initialRules, Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx, bool preventEncore) const {
+void CompactSgf::setupBoardAndHistTolerant(const Rules& initialRules, Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx) const {
   setupInitialBoardAndHist(initialRules, board, nextPla, hist);
-  playMovesTolerant(board, nextPla, hist, turnIdx, preventEncore);
-}
-
-
-void WriteSgf::printGameResult(ostream& out, const BoardHistory& hist)
-{
-  printGameResult(out,hist,std::numeric_limits<double>::quiet_NaN());
-}
-void WriteSgf::printGameResult(ostream& out, const BoardHistory& hist, double overrideFinishedWhiteScore) {
+  playMovesTolerant(board, nextPla, hist, turnIdx);
+}
+
+void WriteSgf::printGameResult(ostream& out, const BoardHistory& hist) {
   if(hist.isGameFinished) {
     out << "RE[";
-    out << WriteSgf::gameResultNoSgfTag(hist, overrideFinishedWhiteScore);
+    if(hist.isNoResult)
+      out << "Void";
+    else if(hist.isResignation && hist.winner == C_BLACK)
+      out << "B+R";
+    else if(hist.isResignation && hist.winner == C_WHITE)
+      out << "W+R";
+    else if(hist.winner == C_BLACK)
+      out << "B+" << (-hist.finalWhiteMinusBlackScore);
+    else if(hist.winner == C_WHITE)
+      out << "W+" << hist.finalWhiteMinusBlackScore;
+    else if(hist.winner == C_EMPTY)
+      out << "0";
+    else
+      ASSERT_UNREACHABLE;
     out << "]";
   }
 }
 
 string WriteSgf::gameResultNoSgfTag(const BoardHistory& hist) {
-  return gameResultNoSgfTag(hist,std::numeric_limits<double>::quiet_NaN());
-}
-string WriteSgf::gameResultNoSgfTag(const BoardHistory& hist, double overrideFinishedWhiteScore) {
   if(!hist.isGameFinished)
     return "";
   else if(hist.isNoResult)
@@ -1461,52 +1438,23 @@     return "B+R";
   else if(hist.isResignation && hist.winner == C_WHITE)
     return "W+R";
-
-  if(!std::isnan(overrideFinishedWhiteScore)) {
-    if(overrideFinishedWhiteScore < 0)
-      return "B+" + Global::doubleToString(-overrideFinishedWhiteScore);
-    else if(overrideFinishedWhiteScore > 0)
-      return "W+" + Global::doubleToString(overrideFinishedWhiteScore);
-    else
-      return "0";
-  }
-  else {
-    if(hist.winner == C_BLACK)
-      return "B+" + Global::doubleToString(-hist.finalWhiteMinusBlackScore);
-    else if(hist.winner == C_WHITE)
-      return "W+" + Global::doubleToString(hist.finalWhiteMinusBlackScore);
-    else if(hist.winner == C_EMPTY)
-      return "0";
-    else
-      ASSERT_UNREACHABLE;
-  }
+  else if(hist.winner == C_BLACK)
+    return "B+" + Global::doubleToString(-hist.finalWhiteMinusBlackScore);
+  else if(hist.winner == C_WHITE)
+    return "W+" + Global::doubleToString(hist.finalWhiteMinusBlackScore);
+  else if(hist.winner == C_EMPTY)
+    return "0";
+  else
+    ASSERT_UNREACHABLE;
   return "";
 }
+
 void WriteSgf::writeSgf(
   ostream& out, const string& bName, const string& wName,
   const BoardHistory& endHist,
   const FinishedGameData* gameData,
   bool tryNicerRulesString,
   bool omitResignPlayerMove
-) {
-  writeSgf(
-    out,
-    bName,
-    wName,
-    endHist,
-    gameData,
-    tryNicerRulesString,
-    omitResignPlayerMove,
-    std::numeric_limits<double>::quiet_NaN()
-  );
-}
-void WriteSgf::writeSgf(
-  ostream& out, const string& bName, const string& wName,
-  const BoardHistory& endHist,
-  const FinishedGameData* gameData,
-  bool tryNicerRulesString,
-  bool omitResignPlayerMove,
-  double overrideFinishedWhiteScore
 ) {
   const Board& initialBoard = endHist.initialBoard;
   const Rules& rules = endHist.rules;
@@ -1521,19 +1469,10 @@   out << "PB[" << bName << "]";
   out << "PW[" << wName << "]";
 
-  if(gameData != NULL) {
-    out << "HA[" << gameData->handicapForSgf << "]";
-  }
-  else {
-    BoardHistory histCopy(endHist);
-    //Always use true for computing the handicap value that goes into an sgf
-    histCopy.setAssumeMultipleStartingBlackMovesAreHandicap(true);
-    out << "HA[" << histCopy.computeNumHandicapStones() << "]";
-  }
 
   out << "KM[" << rules.komi << "]";
   out << "RU[" << (tryNicerRulesString ? rules.toStringNoKomiMaybeNice() : rules.toStringNoKomi()) << "]";
-  printGameResult(out,endHist,overrideFinishedWhiteScore);
+  printGameResult(out,endHist);
 
   bool hasAB = false;
   for(int y = 0; y<ySize; y++) {
@@ -1581,8 +1520,6 @@       out << "," << "gtype=cleanuptraining";
     else if(gameData->mode == FinishedGameData::MODE_FORK)
       out << "," << "gtype=fork";
-    else if(gameData->mode == FinishedGameData::MODE_HANDICAP)
-      out << "," << "gtype=handicap";
     else if(gameData->mode == FinishedGameData::MODE_SGFPOS)
       out << "," << "gtype=sgfpos";
     else if(gameData->mode == FinishedGameData::MODE_HINTPOS)
@@ -1594,8 +1531,6 @@     else
       out << "," << "gtype=other";
 
-    if(gameData->beganInEncorePhase != 0)
-      out << "," << "beganInEncorePhase=" << gameData->beganInEncorePhase;
     if(gameData->usedInitialPosition != 0)
       out << "," << "usedInitialPosition=" << gameData->usedInitialPosition;
     if(gameData->playoutDoublingAdvantage != 0)
@@ -1615,7 +1550,7 @@ 
   string comment;
   Board board(initialBoard);
-  BoardHistory hist(board,endHist.initialPla,endHist.rules,endHist.initialEncorePhase);
+  BoardHistory hist(board,endHist.initialPla,endHist.rules);
   for(size_t i = 0; i<endHist.moveHistory.size(); i++) {
     comment.clear();
     out << ";";
@@ -1630,19 +1565,10 @@       else
         out << "W[";
 
-      bool isPassForKo = hist.isPassForKo(board,loc,pla);
-      if(isPassForKo)
-        writeSgfLoc(out,Board::PASS_LOC,xSize,ySize);
-      else
-        writeSgfLoc(out,loc,xSize,ySize);
+   
+      writeSgfLoc(out,loc,xSize,ySize);
       out << "]";
 
-      if(isPassForKo) {
-        out << "TR[";
-        writeSgfLoc(out,loc,xSize,ySize);
-        out << "]";
-        comment += "Pass for ko";
-      }
     }
 
     if(gameData != NULL && i >= startTurnIdx) {
@@ -1688,13 +1614,13 @@     if(endHist.isGameFinished && i+1 == endHist.moveHistory.size()) {
       if(comment.length() > 0)
         comment += " ";
-      comment += "result=" + WriteSgf::gameResultNoSgfTag(endHist,overrideFinishedWhiteScore);
+      comment += "result=" + WriteSgf::gameResultNoSgfTag(endHist);
     }
 
     if(comment.length() > 0)
       out << "C[" << comment << "]";
 
-    hist.makeBoardMoveAssumeLegal(board,loc,pla,NULL);
+    hist.makeBoardMoveAssumeLegal(board,loc,pla);
 
   }
   out << ")";
