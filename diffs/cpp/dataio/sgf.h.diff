--- cpp/dataio/sgf.h [lightvector:master]+++ cpp/dataio/sgf.h [hzyhhzy:Reversi2022]@@ -61,7 +61,6 @@   float getKomi() const;
   bool hasRules() const;
   Rules getRulesOrFail() const;
-  int getHandicapValue() const;
   Player getSgfWinner() const;
   Color getFirstPlayerColor() const;
 
@@ -112,7 +111,6 @@     std::set<Hash128>& uniqueHashes,
     bool hashComments,
     bool hashParent,
-    bool flipIfPassOrWFirst,
     Rand* rand,
     std::vector<PositionSample>& samples
   ) const;
@@ -121,7 +119,6 @@     std::set<Hash128>& uniqueHashes,
     bool hashComments,
     bool hashParent,
-    bool flipIfPassOrWFirst,
     Rand* rand,
     std::function<void(PositionSample&,const BoardHistory&,const std::string&)> f
   ) const;
@@ -140,7 +137,6 @@     std::set<Hash128>& uniqueHashes,
     bool hashComments,
     bool hashParent,
-    bool flipIfPassOrWFirst,
     Rand* rand,
     std::vector<std::pair<int64_t,int64_t>>& variationTraceNodesBranch,
     std::function<void(PositionSample&,const BoardHistory&,const std::string&)> f
@@ -152,7 +148,6 @@     std::set<Hash128>& uniqueHashes,
     bool hashComments,
     bool hashParent,
-    bool flipIfPassOrWFirst,
     const std::string& comments,
     std::function<void(PositionSample&,const BoardHistory&,const std::string&)> f
   ) const;
@@ -190,8 +185,8 @@   void playMovesAssumeLegal(Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx) const;
   void setupBoardAndHistAssumeLegal(const Rules& initialRules, Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx) const;
   //These throw a StringError upon illegal move.
-  void playMovesTolerant(Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx, bool preventEncore) const;
-  void setupBoardAndHistTolerant(const Rules& initialRules, Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx, bool preventEncore) const;
+  void playMovesTolerant(Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx) const;
+  void setupBoardAndHistTolerant(const Rules& initialRules, Board& board, Player& nextPla, BoardHistory& hist, int64_t turnIdx) const;
 };
 
 namespace WriteSgf {
@@ -199,7 +194,6 @@   //If startTurnIdx >= 0, write a comment in the SGF root node indicating startTurnIdx, so as to
   //indicate the index of the first turn that should be used for training data. (0 means the whole SGF, 1 means skipping black's first move, etc).
   //If valueTargets is not NULL, also write down after each move the MCTS values following that search move.
-  //If overideFinishedScore is not NAN and the game is finished and the result is a score (rather than noresult or resign), set this score instead, from white's perspective.
   void writeSgf(
     std::ostream& out, const std::string& bName, const std::string& wName,
     const BoardHistory& endHist,
@@ -207,21 +201,11 @@     bool tryNicerRulesString,
     bool omitResignPlayerMove
   );
-  void writeSgf(
-    std::ostream& out, const std::string& bName, const std::string& wName,
-    const BoardHistory& endHist,
-    const FinishedGameData* gameData,
-    bool tryNicerRulesString,
-    bool omitResignPlayerMove,
-    double overrideFinishedWhiteScore
-  );
 
   //If hist is a finished game, print the result to out along with SGF tag, else do nothing
   void printGameResult(std::ostream& out, const BoardHistory& hist);
-  void printGameResult(std::ostream& out, const BoardHistory& hist, double overrideFinishedWhiteScore);
   //Get the game result without a surrounding sgf tag
   std::string gameResultNoSgfTag(const BoardHistory& hist);
-  std::string gameResultNoSgfTag(const BoardHistory& hist, double overrideFinishedWhiteScore);
 }
 
 #endif  // DATAIO_SGF_H_
